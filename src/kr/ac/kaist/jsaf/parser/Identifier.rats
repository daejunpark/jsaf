/*******************************************************************************
    Copyright (c) 2012-2013, KAIST, S-Core.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * Definition of JavaScript identifiers.
 */
module kr.ac.kaist.jsaf.parser.Identifier(Symbol, Keyword, Unicode);

import Symbol;
import Keyword;
import Unicode;

option setOfString(JAVASCRIPT_RESERVED);

transient String id      = s:(idstart idrest*) &{ !JAVASCRIPT_RESERVED.contains(s) };
transient String idname  = s:(idstart idrest*);
transient String idstart = UnicodeLetter / [$] / [_] / [\\] UnicodeEscapeSequence ;
transient String idrest  = idstart / UnicodeCombiningMark / UnicodeDigit / UnicodeConnectorPunctuation
                         / [\u200c-\u200d] ; // <ZWNJ> <ZWJ> ;
transient String UnicodeEscapeSequence = [u] HexDigit HexDigit HexDigit HexDigit;
transient String HexDigit = [0-9] / [a-f] / [A-F] ;

private String IdText  = a1:id ;
private String IdTextName  = a1:idname ;

Id Id =
     a1:"_<>_printIS"
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount+1), a1); }
   / a1:"_<>_print"
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount+1), a1); }
   / a1:"_<>_getTickCount"
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount+1), a1); }
   / a1:IdText
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount), a1); };

Id IdName =
     a1:IdTextName
     { yyValue = NodeFactory.makeId(createSpan(yyStart,yyCount), a1); };

Path Path =
     a1s:(Id void:dot)* a2:Id
     { List<Id> ids = new ArrayList<Id>();
       if (a1s != null) ids.addAll(a1s.list());
       ids.add(a2);
       yyValue = NodeFactory.makePath(createSpan(yyStart,yyCount), ids);
     };
