/*******************************************************************************
    Copyright (c) 2012-2013, KAIST, S-Core.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A.5 Functions and Programs
 * Definition of JavaScript functions and programs
 */
module kr.ac.kaist.jsaf.parser.Declaration(Statement, Symbol, Identifier, Keyword, Spacing);

import Statement;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * Program ::= w SourceElements? w EndOfFile
 */
public Program File =
     initParser a1:TopLevelSourceElements? closeParser
     { Span span = createSpan(yyStart,yyCount);
       if (a1 == null) a1 = Collections.<SourceElement>emptyList();
       HashMap<String, Span> map = new HashMap<String, Span>();
       yyValue = NodeFactory.makeProgram(span, a1);
     };
void initParser = w { initParser(); };
void closeParser = w EndOfFile
     { try {
           // revert to the original value for NodeUtil.keepComments
           NodeUtil.setKeepComments(keepComments);
           writer.close();
           fw.close();
       } catch (IOException error) {
           error("Closing a log file for the parser failed!");
       }
     };

/*
 * SourceElements ::= SourceElement (w SourceElement)*
 */
private List<SourceElement> TopLevelSourceElements =
     a1:SourceElement a2s:(w SourceElement)*
     { // Disable recording comments for now for the end of file
       NodeUtil.setKeepComments(false);
       yyValue = Useful.cons(a1, a2s.list());
     };

/*
 * SourceElements ::= SourceElement (w SourceElement)*
 */
private List<SourceElement> SourceElements =
     a1:SourceElement a2s:(w SourceElement)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * SourceElement ::=
 *   ModuleDeclaration
 * | ImportDeclaration
 * | FunctionDeclaration
 * | Statement
 */
private SourceElement SourceElement =
     ModuleDeclaration
   / ImportDeclaration
   / FunctionDeclaration
   / Statement ;

/*
 * ModuleDeclaration ::= module w Id w { (w ModuleElements)? w }
 */
private ModDecl ModuleDeclaration =
     module w a1:Id w opencurly a2:(w ModuleElements)? w closecurly
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<SourceElement>emptyList();
       yyValue = NodeFactory.makeModDecl(span, a1, a2);
     };

/*
 * ModuleElements ::= ModuleElement (w ModuleElement)*
 */
private List<SourceElement> ModuleElements =
     a1:ModuleElement a2s:(w ModuleElement)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * ModuleElement ::=
 *   ExportDeclaration
 * | SourceElement
 */
private SourceElement ModuleElement =
     ExportDeclaration
   / SourceElement ;

/*
 * ExportDeclaration ::= 
 *   export w var w VariableDeclarationList w ;
 * | export w FunctionDeclaration
 * | export w get w Id w ( w ) w FunctionBody
 * | export w set w Id w ( w Id w ) w FunctionBody
 * | export w ExportSpecifierSetList w ;
 */
private ModExport ExportDeclaration =
     export w var w a1:VariableDeclarationList EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModExpVarStmt(span, a1);
     }
   / export w a1:FunctionDeclaration
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModExpFunDecl(span, a1);
     }
   / export w get w a1:Id w openparen w closeparen w a2:FunctionBody
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModExpGetter(span, a1, a2);
     }
   / export w set w a1:Id w openparen w a2:Id w closeparen w a3:FunctionBody
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModExpSetter(span, a1, a2, a3);
     }
   / export w a1:ExportSpecifierSetList EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModExpSpecifiers(span, a1);
     };

/*
 * ExportSpecifierSetList ::=
 *   ExportSpecifierSet (w , w ExportSpecifierSet)*
 */
transient List<ModExpSpecifier> ExportSpecifierSetList =
     a1:ExportSpecifierSet a2s:(w void:comma w ExportSpecifierSet)*
     { List<ModExpSpecifier> result = new ArrayList<ModExpSpecifier>();
       result.addAll(a1);
       for (List<ModExpSpecifier> l: a2s.list()) result.addAll(l);
       yyValue = result;
     };

/*
 * ExportSpecifierSet ::=
 *   { ExportSpecifier (w , w ExportSpecifier)* w } (w from w Path)?
 * | Id (w from w Path)?
 * | * (w from w Path)?
 */
transient List<ModExpSpecifier> ExportSpecifierSet =
     opencurly w a1:ExportSpecifier a2s:(w void:comma w ExportSpecifier)* w closecurly w from w a3:Path
     { List<ModExpSpecifier> result = new ArrayList<ModExpSpecifier>();
       for (ModExpSpecifier s: Useful.cons(a1, a2s.list()))
         result.add(NodeUtil.addPath(s, a3));
       yyValue = result;
     }
   / opencurly w a1:ExportSpecifier a2s:(w void:comma w ExportSpecifier)* w closecurly
     { yyValue = Useful.cons(a1, a2s.list()); }
   / a1:Id w from w a2:Path
     { Span span = createSpan(yyStart,yyCount);
       yyValue = Useful.list(NodeFactory.makeExportName(span, a1, a2));
     }
   / a1:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = Useful.list(NodeFactory.makeExportName(span, a1));
     }
   / star w from w a1:Path
     { Span span = createSpan(yyStart,yyCount);
       yyValue = Useful.list(NodeFactory.makeStarFromPath(span, a1));
     }
   / star
     { Span span = createSpan(yyStart,yyCount);
       yyValue = Useful.list(NodeFactory.makeStar(span));
     };

/*
 * ExportSpecifier ::=
 *   Id w : w Path
 * | Id
 */
transient ModExpSpecifier ExportSpecifier =
     a1:Id w colon w a2:Path
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeExportAlias(span, a1, a2);
     }
   / a1:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeExportName(span, a1);
     };

/*
 * ImportDeclaration ::= import ImportClauseList w ;
 */
private ModImpDecl ImportDeclaration =
     import w a1:ImportClauseList EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModImpDecl(span, a1);
     };

/*
 * ImportClauseList ::=
 *   ImportClause (w , w ImportClause)*
 */
transient List<ModImport> ImportClauseList =
     a1:ImportClause a2s:(w void:comma w ImportClause)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * ImportClause ::=
 *   ImportSpecifierSet w from w ModuleSpecifier
 * | StringLiteral w as w Id
 * ModuleSpecifier ::= StringLiteral | Identifier
 */
transient ModImport ImportClause =
     a1:ImportSpecifierSet w from w a2:Path
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModImpSpecifierSet(span, a1, a2);
     }
   / a1:Path w as w a2:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeModImpAlias(span, a1, a2);
     };

/*
 * ImportSpecifierSet ::=
 *   { ImportSpecifier (w , w ImportSpecifier)* w }
 * | Id
 */
transient List<ModImpSpecifier> ImportSpecifierSet =
     opencurly w a1:ImportSpecifier a2s:(w void:comma w ImportSpecifier)* w closecurly
     { yyValue = Useful.cons(a1, a2s.list()); }
   / a1:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = Useful.list(NodeFactory.makeImportName(span, a1));
     };

/*
 * ImportSpecifier ::=
 *   Id w : w Id
 * | Id
 */
transient ModImpSpecifier ImportSpecifier =
     a1:Id w colon w a2:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeImportAlias(span, a1, a2);
     }
   / a1:Id
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeImportName(span, a1);
     };

/*
 * FunctionDeclaration ::= function w Id w ( (w Params)? w ) w FunctionBody
 */
FunDecl FunctionDeclaration =
     function w a1:Id w openparen a2:(w Params)? w closeparen w a3:FunctionBody
     { Span span = createSpan(yyStart,yyCount);
       if (a2 == null) a2 = Collections.<Id>emptyList();
       yyValue = NodeFactory.makeFunDecl(span, a1, a2, a3);
     };

/*
 * Params ::= Id (w , w Id)*
 */
transient List<Id> Params =
     a1:Id a2s:(w void:comma w Id)+
     { yyValue = Useful.cons(a1, a2s.list()); }
   / a1:Id
     { yyValue = Useful.list(a1); };

/*
 * FunctionBody ::= { w SourceElement* w }
 */
transient List<SourceElement> FunctionBody =
     opencurly w closecurly
     { yyValue = Useful.list(); }
   / opencurly w yyValue:SourceElements w closecurly ;

/*
 * FunctionExpr ::= function (w Id)? w ( (w Params)? w ) w FunctionBody
 */
FunExpr FunctionExpr =
     function a1:(w Id)? w openparen a2:(w Params)? w closeparen w a3:FunctionBody
     { Span span = createSpan(yyStart,yyCount);
       Id f = (a1 == null) ? NodeFactory.makeId(span, "", "") : a1;
       if (a2 == null) a2 = Collections.<Id>emptyList();
       yyValue = NodeFactory.makeFunExpr(span, f, a2, a3);
     };
