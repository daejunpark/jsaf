/*******************************************************************************
    Copyright (c) 2012-2013, KAIST, S-Core.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A complete JavaScript grammar.
 */
module kr.ac.kaist.jsaf.parser.JS;
modify kr.ac.kaist.jsaf.parser.Declaration(Statement, Symbol, Identifier,
                                           Keyword, Spacing)
            as Declaration;
instantiate kr.ac.kaist.jsaf.parser.Statement(Declaration, Expression,
                                              ExpressionNoIn, Symbol, Identifier,
                                              Keyword, Spacing)
            as Statement;
instantiate kr.ac.kaist.jsaf.parser.Expression(Declaration, ExpressionNoIn,
                                               Literal, Symbol, Identifier,
                                               Keyword, Spacing)
            as Expression;
instantiate kr.ac.kaist.jsaf.parser.ExpressionNoIn(Declaration, Expression,
                                                   Literal, Symbol,
                                                   Identifier, Keyword, Spacing)
            as ExpressionNoIn;
instantiate kr.ac.kaist.jsaf.parser.Literal(Symbol, Identifier, Keyword, Spacing)
            as Literal;
instantiate kr.ac.kaist.jsaf.parser.Identifier(Symbol, Keyword, Unicode)
            as Identifier;
instantiate kr.ac.kaist.jsaf.parser.Symbol(Identifier, Keyword, Spacing)
            as Symbol;
instantiate kr.ac.kaist.jsaf.parser.Spacing(Symbol)
            as Spacing;
instantiate kr.ac.kaist.jsaf.parser.Keyword(Identifier)
            as Keyword;
instantiate kr.ac.kaist.jsaf.parser.Unicode
            as Unicode;

header {
import java.util.HashMap;
import kr.ac.kaist.jsaf.exceptions.SyntaxError;
import kr.ac.kaist.jsaf.nodes.*;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.Useful;
import edu.rice.cs.plt.tuple.Option;
import edu.rice.cs.plt.iter.IterUtil;
import edu.rice.cs.plt.collect.CollectUtil;
import xtc.util.Action;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import static kr.ac.kaist.jsaf.exceptions.JSAFError.error;
}

body {
    Span createSpan(int start, int end) {
        int i = end;
        while ( i >= 0 && yyData.length > i && yyData[i] == ' ' ) { i--; }
        if ( i-1 >= start )
            end = i-1;
        else
            end = start;
        Column s = column(start);
        Column e = column(end);
        SourceLocRats slStart = new SourceLocRats(s.file, s.line, s.column, start);
        SourceLocRats slEnd   = new SourceLocRats(e.file, e.line, e.column, end);
        return new Span(slStart, slEnd);
    }

    private SpanInfo makeSpanInfo(int start, int end) {
        return NodeFactory.makeSpanInfo(createSpan(start, end));
    }

    private BufferedWriter writer;
    private BufferedWriter commentWriter;
    private BufferedReader reader;
    private BufferedReader commentReader;
    private String logFile = column(0).file + ".log";
    private String commentFile = column(0).file + ".comment";

    void initParser() {
        try {
            if (commentWriter == null)
                try { commentWriter = Useful.filenameToBufferedWriter( commentFile );
                } catch (IOException err) {}
            writer = Useful.filenameToBufferedWriter( logFile );
        } catch (IOException error) {
            error("Creating a log file for the parser failed!");
        }
    }

    private void commentLog(Span span, String message) {
        if (commentWriter == null)
            try { commentWriter = Useful.filenameToBufferedWriter( commentFile );
            } catch (IOException err) {}
        if (NodeUtil.getCloneDetector())
            NodeUtil.log(commentWriter, span, message);
    }

    private void log(String message) {
        NodeUtil.log(writer, message);
    }

    private VarStmt makeArrayNumberLiteral(Span span, Id name) {
        try {
            List<Double> result = new ArrayList<Double>();
            writer.close();
            reader = Useful.filenameToBufferedReader(logFile);
            String line = reader.readLine();
            while (line != null) {
                Double number = NodeFactory.makeNumericLiteral(writer, span, line);
                result.add(number);
                line = reader.readLine();
            }
            reader.close();
            Expr expr = NodeFactory.makeArrayNumberExpr(span, result);
            VarDecl vd = NodeFactory.makeVarDecl(span, name, Option.<Expr>some(expr));
            initParser();
            return NodeFactory.makeVarStmt(span, Useful.list(vd));
        } catch (IOException error) {
            error("Closing a log file for the parser failed!");
            return NodeFactory.makeVarStmt(span, new ArrayList<VarDecl>());
        }
    }
}

option parser(kr.ac.kaist.jsaf.parser.JS);
