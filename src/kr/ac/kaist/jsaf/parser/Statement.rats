/*******************************************************************************
    Copyright (c) 2012-2013, KAIST, S-Core.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A.4 Statements
 * Definition of JavaScript statements
 */
module kr.ac.kaist.jsaf.parser.Statement(Declaration, Expression, ExpressionNoIn,
                                         Symbol, Identifier, Keyword, Spacing);

import Declaration;
import Expression;
import ExpressionNoIn;
import Symbol;
import Identifier;
import Keyword;
import Spacing;

/*
 * Statement ::=
 *   Block
 * | var w VariableDeclarationList w ;
 * | ;
 * | [lookahead \not\in {{, function}] Expression w ;
 * | if w ( w Expression w ) w Statement w (else w Statement)?
 * | do w Statement w while w ( w Expression w ) w ;
 * | while w ( w Expression w ) w Statement
 * | for w ( (w ExpressionNoIn)? w ; (w Expression)? w ; (w Expression)? w ) Statement
 * | for w ( w var w VariableDeclarationListNoIn w ; (w Expression)? w ; (w Expression)? w ) w Statement
 * | for w ( w LeftHandSide w in w Expression w ) w Statement
 * | for w ( w var w VariableDeclarationNoIn w in w Expression w ) w Statement
 * | continue (s Id)? w ;
 * | break (s Id)? w ;
 * | return (s Expression)? w ;
 * | with w ( w Expression w ) w Statement
 * | switch w ( w Expression w ) w CaseBlock
 * | Id w : w Statement
 * | throw s Expression w ;
 * | try w Block w Catch
 * | try w Block w Finally
 * | try w Block w Catch w Finally
 * | debugger w ;
 */
private transient void NumericLiteral =
     a1:DecimalDigits !(idrest) { log(a1); } ;
private transient String DecimalDigits = [0-9]+ ;
private transient void NumericLiterals =
     NumericLiteral w (void:comma w NumericLiteral w)+ ;

public Stmt Statement =
     a1:Block
     { Span span = createSpan(yyStart,yyCount+1);
       yyValue = NodeFactory.makeBlock(span, a1);
     }
   / ExtendedFunctionDeclaration
   / var w a1:Id w equals w opensquare w NumericLiterals closesquare EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = makeArrayNumberLiteral(span, a1);
     }
   / var w a1:VariableDeclarationList EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeVarStmt(span, a1);
     }
   / semicolon
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeEmptyStmt(span);
     }
   / !(opencurly) a1:Expression EOS // !(opencurly / function) a1:Expression EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeExprStmt(span, a1);
     }
   / if w openparen w a1:Expression w closeparen w a2:Statement
     a3:(w else w Statement)?
     { Span span = createSpan(yyStart,yyCount);
       Option<Stmt> elseB;
       if (a3 == null) elseB = Option.<Stmt>none();
       else            elseB = Option.<Stmt>some(a3);
       yyValue = NodeFactory.makeIf(span, a1, a2, elseB);
     }
   / do w a1:Statement w while w openparen w a2:Expression w
     closeparen EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeDoWhile(span, a1, a2);
     }
   / while w openparen w a1:Expression w closeparen w a2:Statement
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeWhile(span, a1, a2);
     }
   / for w openparen a1:(w ExpressionNoIn)? w semicolon a2:(w Expression)? w
     semicolon a3:(w Expression)? w closeparen w a4:Statement
     { Span span = createSpan(yyStart,yyCount);
       Option<Expr> init;
       Option<Expr> test;
       Option<Expr> update;
       if (a1 == null) init = Option.<Expr>none();
       else            init = Option.<Expr>some(a1);
       if (a2 == null) test = Option.<Expr>none();
       else            test = Option.<Expr>some(a2);
       if (a3 == null) update = Option.<Expr>none();
       else            update = Option.<Expr>some(a3);
       yyValue = NodeFactory.makeFor(span, init, test, update, a4);
     }
   / for w openparen w var w a1:VariableDeclarationListNoIn w semicolon
     a2:(w Expression)? w semicolon a3:(w Expression)? w closeparen w a4:Statement
     { Span span = createSpan(yyStart,yyCount);
       Option<Expr> test;
       Option<Expr> update;
       if (a2 == null) test = Option.<Expr>none();
       else            test = Option.<Expr>some(a2);
       if (a3 == null) update = Option.<Expr>none();
       else            update = Option.<Expr>some(a3);
       yyValue = NodeFactory.makeForVar(span, a1, test, update, a4);
     }
   / for w openparen w a1:LeftHandSide w in w a2:Expression w
     closeparen w a3:Statement
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeForIn(span, a1, a2, a3);
     }
   / for w openparen w var w a1:VariableDeclarationNoIn w in w a2:Expression w
     closeparen w a3:Statement
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeForVarIn(span, a1, a2, a3);
     }
   / continue s a1:Id EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeContinue(span, Option.<Label>some(NodeFactory.makeLabel(span, a1)));
     }
   / continue EOSnoLB
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeContinue(span, Option.<Label>none());
     }
   / break s a1:Id EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeBreak(span, Option.<Label>some(NodeFactory.makeLabel(span, a1)));
     }
   / break EOSnoLB
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeBreak(span, Option.<Label>none());
     }
   / return s a1:Expression EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeReturn(span, Option.<Expr>some(a1));
     }
   / return EOSnoLB
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeReturn(span, Option.<Expr>none());
     }
   / with w openparen w a1:Expression w closeparen w a2:Statement
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeWith(span, a1, a2);
     }
   / switch w openparen w a1:Expression w closeparen w
     opencurly a2:(w CaseClauses)? w closecurly
     { Span span = createSpan(yyStart,yyCount+1);
       if (a2 == null) a2 = Useful.list();
       yyValue = NodeFactory.makeSwitch(span, a1, a2);
     }
   / switch w openparen w a1:Expression w closeparen w
     opencurly a2:(w CaseClauses)? w default w colon a3s:(w Statement)*
     a4:(w CaseClauses)? w closecurly
     { Span span = createSpan(yyStart,yyCount+1);
       if (a2 == null) a2 = Useful.list();
       if (a4 == null) a4 = Useful.list();
       yyValue = NodeFactory.makeSwitch(span, a1, a2,
                                        Option.<List<Stmt>>some(a3s.list()), a4);
     }
   / a1:Id w colon w a2:Statement
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeLabelStmt(span, NodeFactory.makeLabel(span, a1), a2);
     }
   / throw s a1:Expression EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeThrow(span, a1);
     }
   / try w a1:Block w a2:Catch w a3:Finally
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeTry(span, a1, a2, a3);
     }
   / try w a1:Block w a2:Catch
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeTry(span, a1, a2);
     }
   / try w a1:Block w a2:Finally
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeTry(span, a1, a2);
     }
   / debugger EOS
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeDebugger(span);
     };

private transient Stmt ExtendedFunctionDeclaration =
     a1:FunctionDeclaration
     { System.out.println(a1.getInfo().getSpan()+":");
       System.out.println("    Warning: the use of FunctionDeclaration as a Statement is not allowed in ECMAScript.");
       yyValue = a1;
     };

/*
 * Block ::= { (w Statement)* w }
 */
private transient List<Stmt> Block =
     opencurly w closecurly
     { yyValue = Useful.<Stmt>list(); }
   / opencurly w a1:Statement a2s:(w Statement)* w closecurly
     { Span span = createSpan(yyStart,yyCount+1);
       yyValue = Useful.cons(a1, a2s.list());
     };

/*
 * VariableDeclarationList ::=
 *   VariableDeclaration (w , w VariableDeclaration)*
 */
transient List<VarDecl> VariableDeclarationList =
     a1:VariableDeclaration a2s:(w void:comma w VariableDeclaration)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * VariableDeclarationListNoIn ::=
 *   VariableDeclarationNoIn (w , w VariableDeclarationListNoIn)*
 */
private transient List<VarDecl> VariableDeclarationListNoIn =
     a1:VariableDeclarationNoIn a2s:(w void:comma w VariableDeclarationNoIn)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * VariableDeclaration ::=
 *   Id (w = w Assignment)?
 */
private transient VarDecl VariableDeclaration =
     a1:Id a2:(w void:equals w Assignment)?
     { Span span = createSpan(yyStart,yyCount);
       Option<Expr> expr;
       if (a2 == null) expr = Option.<Expr>none();
       else            expr = Option.<Expr>some(a2);
       yyValue = NodeFactory.makeVarDecl(span, a1, expr);
     };

/*
 * VariableDeclarationNoIn ::=
 *   Id (w = w AssignmentNoIn)?
 */
private transient VarDecl VariableDeclarationNoIn =
     a1:Id a2:(w void:equals w AssignmentNoIn)?
     { Span span = createSpan(yyStart,yyCount);
       Option<Expr> expr;
       if (a2 == null) expr = Option.<Expr>none();
       else            expr = Option.<Expr>some(a2);
       yyValue = NodeFactory.makeVarDecl(span, a1, expr);
     };

/*
 * CaseClauses ::=
 *   CaseClause (w CaseClause)*
 */
private List<Case> CaseClauses =
     a1:CaseClause a2s:(w CaseClause)*
     { yyValue = Useful.cons(a1, a2s.list()); };

/*
 * CaseClause ::= case w Expression w : (w Statement)*
 */
private transient Case CaseClause =
     case w a1:Expression w colon a2s:(w Statement)*
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeCase(span, a1, a2s.list());
     };

/*
 * Catch ::= catch w ( w Id w ) w Block
 */
private transient Catch Catch =
     catch w openparen w a1:Id w closeparen w a2:Block
     { Span span = createSpan(yyStart,yyCount);
       yyValue = NodeFactory.makeCatch(span, a1, a2);
     };

/*
 * Finally ::= finally w Block
 */
private transient List<Stmt> Finally =
     finally w yyValue:Block ;
