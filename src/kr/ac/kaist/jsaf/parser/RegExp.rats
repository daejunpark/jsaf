/*******************************************************************************
    Copyright (c) 2012-2013, KAIST, S-Core.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/*
 * A complete JavaScript Regular Expression grammar.
 */
module kr.ac.kaist.jsaf.parser.RegExp;

header {
import kr.ac.kaist.jsaf.nodes.*;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.Useful;
import edu.rice.cs.plt.tuple.Option;
import edu.rice.cs.plt.iter.IterUtil;
import edu.rice.cs.plt.collect.CollectUtil;
import xtc.util.Action;
import java.io.BufferedWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import static kr.ac.kaist.jsaf.exceptions.JSAFError.error;
}

body {
  static {
    add(JAVASCRIPT_RESERVED, new String[] {
        "break",        "catch",        "else",         "finally",
        "function",     "if",           "new",          "return",
        "then",         "throw",        "try",          "var",
        "while",        "with",

        "eval",         "false",        "get",          "null",
        "set",          "true",         "undefined"
    });
  }

  int getParenCount(RegExpAbstractNode node) {
    if (node.getInfo() instanceof RegExpCapturingParensInfo) {
      return ((RegExpCapturingParensInfo) node.getInfo()).getParenCount();
    } else {
      return 0;
    }
  }
  RegExpCapturingParensInfo makeParenInfo(int parenCount) {
    return new RegExpCapturingParensInfo(parenCount);
  }
  RegExpDisjunction makeEmptyDisjunction() {
    return new RegExpBaseDisjunction(makeParenInfo(0), new RegExpEmptyAlternative(makeParenInfo(0)));
  }
}

option setOfString(JAVASCRIPT_RESERVED), parser(kr.ac.kaist.jsaf.parser.RegExp);

/*
 * Pattern ::= Disjunction
 */
public RegExpPattern Pattern =
     w EndOfFile
     { yyValue = new RegExpPattern(makeParenInfo(0), makeEmptyDisjunction()); }
   / w a1:Disjunction w EndOfFile
     { yyValue = new RegExpPattern(makeParenInfo(getParenCount(a1)), a1); };

/*
 * Disjunction ::= Alternative
 *               | Alternative "|" Disjunction
 */
private transient RegExpDisjunction Disjunction =
     a1:Alternative w "|" w a2:Disjunction
     { yyValue = new RegExpConsDisjunction(makeParenInfo(getParenCount(a1) + getParenCount(a2)), a1, a2); }
   / a1:Alternative w "|"
     { yyValue = new RegExpConsDisjunction(makeParenInfo(getParenCount(a1)), a1,
                                           new RegExpBaseDisjunction(makeParenInfo(0), new RegExpEmptyAlternative(makeParenInfo(0)))); }
   / w "|" w a2:Disjunction
     { yyValue = new RegExpConsDisjunction(makeParenInfo(getParenCount(a2)), new RegExpEmptyAlternative(makeParenInfo(0)), a2); }
   / a1:Alternative 
     { yyValue = new RegExpBaseDisjunction(makeParenInfo(getParenCount(a1)), a1); };

/*
 * Alternative ::= [empty]
 *               | Alternative Term
 */
private transient RegExpAlternative Alternative =
     a1:Term a2s:(w Term)*
     { List<RegExpTerm> l = new ArrayList<RegExpTerm>();
       l.add(a1);
       if (a2s != null) l.addAll(a2s.list());
       RegExpAlternative a = new RegExpConsAlternative(makeParenInfo(getParenCount(a1)), new RegExpEmptyAlternative(makeParenInfo(0)), a1);
       for (RegExpTerm t : a2s)
         a = new RegExpConsAlternative(makeParenInfo(getParenCount(a) + getParenCount(t)), a, t);
       yyValue = a;
     };

/*
 * Term ::= Assertion
 *        | Atom
 *        | Atom Quantifier
 */
private transient RegExpTerm Term =
     Assertion
   / a1:Atom w a2:Quantifier
     { yyValue = new RegExpAtomQuantifier(makeParenInfo(getParenCount(a1) + getParenCount(a2)), a1, a2); }
   / Atom ;

/*
 * Assertion ::= ^
 *             | $
 *             | \ b
 *             | \ B
 *             | ( ? = Disjunction )
 *             | ( ? ! Disjunction )
 */
private transient RegExpAssertion Assertion =
     "^"   { yyValue = new RegExpAssertionCaret(makeParenInfo(0)); }
   / "$"   { yyValue = new RegExpAssertionDollar(makeParenInfo(0)); }
   / "\\b" { yyValue = new RegExpAssertionLowerCaseB(makeParenInfo(0)); }
   / "\\B" { yyValue = new RegExpAssertionUpperCaseB(makeParenInfo(0)); }
   / "(" w "?" w "=" w a1:Disjunction? w ")"
     { if (a1 == null)
           a1 = makeEmptyDisjunction();
       yyValue = new RegExpAssertionEqual(makeParenInfo(getParenCount(a1)), a1);
     }
   / "(" w "?" w "!" w a1:Disjunction? w ")"
     { if (a1 == null)
           a1 = makeEmptyDisjunction();
       yyValue = new RegExpAssertionExcla(makeParenInfo(getParenCount(a1)), a1);
     };

/*
 * Atom ::= PatternCharacter
 *        | .
 *        | \ AtomEscape
 *        | CharacterClass
 *        | ( Disjunction )
 *        | ( ? : Disjunction )
 */
private transient RegExpAtom Atom =
     PatternCharacter
   / "." { yyValue = new RegExpDot(makeParenInfo(0)); }
   / "\\" a1:AtomEscape { yyValue = a1; }
   / a1:CharacterClass { yyValue = a1; }
   / "(" w a1:Disjunction? w ")"
     { if (a1 == null) a1 = makeEmptyDisjunction();
       yyValue = new RegExpParen(makeParenInfo(getParenCount(a1) + 1), a1);
     }
   / "(" w "?" w ":" w a1:Disjunction? w ")"
     { if (a1 == null) a1 = makeEmptyDisjunction();
       yyValue = new RegExpParenOpt(makeParenInfo(getParenCount(a1)), a1);
     };

private transient RegExpPatternChar PatternCharacter =
     a1:(!NonPatternChar _) { yyValue = new RegExpPatternChar(makeParenInfo(0), a1+""); };

private transient String NonPatternChar =
     a1:[^$\\.*+?(){}|] { yyValue = a1+""; }
   / "[" { yyValue = "["; }
   / "]" { yyValue = "]"; };

private transient RegExpAtomEscape AtomEscape =
     DecimalEscape
   / CharacterEscape
   / CharacterClassEscape ;

private transient RegExpCharacterEscape CharacterEscape =
     ControlEscape
   / "c" a1:ControlLetter { yyValue = a1; }
   / a1:HexEscapeSequence { yyValue = new RegExpHexEscapeSequence(makeParenInfo(0), a1); }
   / a1:UnicodeEscapeSequence { yyValue = new RegExpUnicodeEscapeSequence(makeParenInfo(0), a1); }
   / IdentityEscape ;

private transient RegExpControlEscape ControlEscape =
     a1:[fnrtv] { yyValue = new RegExpControlEscape(makeParenInfo(0), a1+""); };

private transient RegExpControlLetter ControlLetter =
     a1:[a-zA-Z] { yyValue = new RegExpControlLetter(makeParenInfo(0), a1+""); };

// ZWNJ (U+200C) or ZWJ (U+200D)
private transient RegExpIdentityEscape IdentityEscape =
     a1:(!idrest _) { yyValue = new RegExpIdentityEscape(makeParenInfo(0), a1+""); }
   / a1:([\u200c] / [\u200d]) { yyValue = new RegExpIdentityEscape(makeParenInfo(0), a1+""); };

/*
 * DecimalIntegerLiteral ::=
 *   0
 * | NonZeroDigit DecimalDigits?
 */
private transient RegExpDecimalEscape DecimalEscape =
    "0" !([0-9]) { yyValue = new RegExpDecimalEscape(makeParenInfo(0), "0"); }
  / a1:NonZeroDigit a2:DecimalDigits? !([0-9])
    { if (a2 == null) yyValue = new RegExpDecimalEscape(makeParenInfo(0), a1);
      else yyValue = new RegExpDecimalEscape(makeParenInfo(0), a1+a2);
    };

private transient String NonZeroDigit = [1-9] ;
private transient String DecimalDigits = [0-9]+ ;

private transient RegExpCharacterClassEscape CharacterClassEscape =
     a1:[dDsSwW] { yyValue = new RegExpCharacterClassEscape(makeParenInfo(0), a1+""); };

private transient RegExpCharacterClass CharacterClass =
     "[" w "^" w a1:ClassRanges w "]"
     { yyValue = new RegExpCharacterClassExclusion(makeParenInfo(0), a1); }
   / "[" w a1:NoCaretClassRanges w "]"
     { yyValue = new RegExpCharacterClassInclusion(makeParenInfo(0), a1); };

private transient RegExpClassRanges ClassRanges =
     yyValue:NonemptyClassRanges?
     { if (yyValue == null) yyValue = new RegExpEmptyClassRanges(new RegExpClassRangesInfo(true)); };

private transient RegExpClassRanges NoCaretClassRanges =
     a1:ClassRanges & { ((RegExpClassRangesInfo) a1.getInfo()).isNoCaret() };

private transient RegExpNonemptyClassRanges NonemptyClassRanges =
     a1:ClassAtom w "-" w a2:ClassAtom w a3:ClassRanges
     { yyValue = new RegExpNonemptyClassRangesDash(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1, a2, a3); }
   / a1:ClassAtom w a2:NonemptyClassRangesNoDash
     { yyValue = new RegExpNonemptyClassRangesAtomNoDash(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1, a2); }
   / a1:ClassAtom 
     { yyValue = new RegExpNonemptyClassRangesAtom(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1); };

private transient RegExpNonemptyClassRangesNoDash NonemptyClassRangesNoDash =
     a1:ClassAtomNoDash w "-" w a2:ClassAtom w a3:ClassRanges
     { yyValue = new RegExpNonemptyClassRangesNoDashDash(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1, a2, a3); }
   / a1:ClassAtomNoDash w a2:NonemptyClassRangesNoDash
     { yyValue = new RegExpNonemptyClassRangesNoDashAtomNoDash(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1, a2); }
   / a1:ClassAtom
     { yyValue = new RegExpNonemptyClassRangesNoDashAtom(new RegExpClassRangesInfo(((RegExpClassRangesInfo) a1.getInfo()).isNoCaret()), a1); };

private transient RegExpClassAtom ClassAtom =
     "-"
     { yyValue = new RegExpClassAtomDash(new RegExpClassRangesInfo(true)); }
   / ClassAtomNoDash ;

private transient RegExpClassAtomNoDash ClassAtomNoDash =
     "\\" a1:ClassEscape { yyValue = a1; }
   / a1:(!NonClassAtomNoDash _)
     { yyValue = new RegExpClassAtomNoDashCharacter(new RegExpClassRangesInfo(a1 != '^'), a1+""); };

private transient String NonClassAtomNoDash =
     a1:[\\] { yyValue = a1+""; }
   / a1:"-" { yyValue = a1; }
   / a1:"]" { yyValue = a1; };

private transient RegExpClassEscape ClassEscape =
     a1:DecimalEscape
     { yyValue = new RegExpClassDecimalEscape(new RegExpClassRangesInfo(true), a1); }
   / "b"
     { yyValue = new RegExpClassEscapeB(new RegExpClassRangesInfo(true)); }
   / a1:CharacterEscape
     { yyValue = new RegExpClassCharacterEscape(new RegExpClassRangesInfo(true), a1); }
   / a1:CharacterClassEscape
     { yyValue = new RegExpClassCharacterClassEscape(new RegExpClassRangesInfo(true), a1); };

private transient String HexEscapeSequence =
     a1:[x] a2:HexDigit a3:HexDigit { yyValue = a1+a2+a3; } ;

private transient String HexDigit = [0-9a-fA-F] ;

private transient String UnicodeEscapeSequence =
     a1:[u] a2:HexDigit a3:HexDigit a4:HexDigit a5:HexDigit
     { yyValue = a1+a2+a3+a4+a5; } ;

private transient RegExpQuantifier Quantifier =
     a1:QuantifierPrefix w "?"
     { yyValue = new RegExpQuantifier(makeParenInfo(0), a1, false); }
   / a1:QuantifierPrefix
     { yyValue = new RegExpQuantifier(makeParenInfo(0), a1, true); };

private transient RegExpQuantifierPrefix QuantifierPrefix =
     "*" { yyValue = new RegExpQuantifierStar(makeParenInfo(0)); }
   / "+" { yyValue = new RegExpQuantifierPlus(makeParenInfo(0)); }
   / "?" { yyValue = new RegExpQuantifierQuest(makeParenInfo(0)); }
   / "{" w a1:DecimalDigits w "," w a2:DecimalDigits w "}"
     { yyValue = new RegExpQuantifierNumber(makeParenInfo(0), new Integer(a1),
                                  Option.<Integer>some(new Integer(a2)));
     }
   / "{" w a1:DecimalDigits w "," w "}"
     { yyValue = new RegExpQuantifierNumber(makeParenInfo(0), new Integer(a1), Option.<Integer>none()); }
   / "{" w a1:DecimalDigits w "}"
     { yyValue = new RegExpQuantifierNumber(makeParenInfo(0), new Integer(a1), Option.<Integer>some(new Integer(a1))); };

transient String id      = s:(idstart idrest*) &{ !JAVASCRIPT_RESERVED.contains(s) };
transient String idname  = s:(idstart idrest*);
transient String idstart = [a-zA-Z] ;
transient String idrest  = idstart / [0-9] / [_];

private String IdText  = a1:id ;

/* If a MultiLineComment contains one or more line terminators,
 * then it is replaced by a single line terminator */
/* LineTerminator ::= <LF> | <CR> | <LS> | <PS> */
transient String LineTerminator =
     a1:([\u000a] / [\u000d] / [\u2028] / [\u2029])
     { yyValue = ""+a1; }
   / MultiLineCommentWLB ;

transient String MultiLineCommentWLB =
     "/*" a1s:MultiLineCommentCharNoLB* a2:LineTerminator a3s:MultiLineCommentCharWLB* "*/"
     { StringBuilder buf = new StringBuilder();
       buf.append("/*");
       for (String s : a1s.list()) buf.append(s);
       buf.append(a2);
       for (String s : a3s.list()) buf.append(s);
       buf.append("*/");
       yyValue = buf.toString();
     };

transient private String MultiLineCommentCharNoLB =
     !("*/" / LineTerminator) a1:_ { yyValue = a1+""; } ;

transient private String MultiLineCommentCharWLB =
     !("*/") _ ;

transient void EndOfFile  = "\u001a"? w !_ ;
transient void w = Space*; // whitespace optional
transient private void Space =
     void:"\t"
   / [\u000B]
   / void:"\f"
   / void:" "
   / [\u00A0]
   / [\uFEFF] ;
