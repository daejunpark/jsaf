/*******************************************************************************
    Copyright (c) 2012, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/***************************
    JavaScript AST
    ECMAScript 5
 ***************************/

// REMINDER: If you modify this file, you probably ought to be
// changing factory methods as well.

generateEmptyConstructor yes;   // for reflective object creation
visitMethod accept;
visitorMethodPrefix for;
addGetterPrefixes yes;
usePLT yes;
tabSize 4;
allowNulls no;
generateToString no;
generateEquals yes;
generateSerializers yes;
generateRecursiveVisitors no;
customClassPath ../build;

/* order matters here */
customGenerator kr.ac.kaist.jsaf.astgen.ScalaRegExpGenerator;

package kr.ac.kaist.jsaf.nodes;
import java.lang.Double;
import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.*;
import edu.rice.cs.plt.tuple.Option;

begin ast;

interface RegExpNode();
    root abstract RegExpAbstractNode(RegExpNodeInfo info);
        /*
         * Pattern ::= Disjunction
         */
        RegExpPattern(RegExpDisjunction disjunction);
        /*
         * Disjunction ::= Alternative
         *               | Alternative "|" Disjunction
         */
        abstract RegExpDisjunction();
            RegExpBaseDisjunction(RegExpAlternative a);
            RegExpConsDisjunction(RegExpAlternative a, RegExpDisjunction d);
        /*
         * Alternative ::= [empty]
         *               | Alternative Term
         */
        abstract RegExpAlternative();
            RegExpEmptyAlternative();
            RegExpConsAlternative(RegExpAlternative a, RegExpTerm t);
        /*
         * Term ::= Assertion
         *        | Atom
         *        | Atom Quantifier
         */
        abstract RegExpTerm();
            /*
             * Assertion ::= ^
             *             | $
             *             | \ b
             *             | \ B
             *             | ( ? = Disjunction )
             *             | ( ? ! Disjunction )
             */
            abstract RegExpAssertion();
                RegExpAssertionCaret();
                RegExpAssertionDollar();
                RegExpAssertionLowerCaseB();
                RegExpAssertionUpperCaseB();
                RegExpAssertionEqual(RegExpDisjunction d);
                RegExpAssertionExcla(RegExpDisjunction d);
            /*
             * Atom ::= PatternCharacter
             *        | .
             *        | \ AtomEscape
             *        | CharacterClass
             *        | ( Disjunction )
             *        | ( ? : Disjunction )
             */
            abstract RegExpAtom();
                RegExpPatternChar(String str);
                RegExpDot();
                /*
                 * AtomEscape ::= DecimalEscape
                 *              | CharacterEscape
                 *              | CharacterClassEscape
                 */
                abstract RegExpAtomEscape();
                    RegExpDecimalEscape(String str);
                    /*
                     * CharacterEscape ::= ControlEscape
                     *                   | ControlLetter
                     *                   | HexEscapeSequence
                     *                   | UnicodeEscapeSequence
                     *                   | IdentityEscape
                     */
                    abstract RegExpCharacterEscape();
                        RegExpControlEscape(String str);
                        RegExpControlLetter(String str);
                        RegExpHexEscapeSequence(String str);
                        RegExpUnicodeEscapeSequence(String str);
                        RegExpIdentityEscape(String str);
                    RegExpCharacterClassEscape(String str);
                /*
                 * CharacterClass ::= [ [lookahead \notin {^}] ClassRanges ]
                 *                  | [ ^ ClassRanges ]
                 */
                abstract RegExpCharacterClass();
                    RegExpCharacterClassInclusion(RegExpClassRanges r);
                    RegExpCharacterClassExclusion(RegExpClassRanges r);
                    /*
                     * ClassRanges ::= [empty]
                     *               | NonemptyClassRanges
                     */
                    abstract RegExpClassRanges();
                        RegExpEmptyClassRanges();
                        /*
                         * NonemptyClassRanges ::= ClassAtom
                         *                       | ClassAtom NonemptyClassRangesNoDash
                         *                       | ClassAtom - ClassAtom ClassRanges
                         */
                        abstract RegExpNonemptyClassRanges();
                            RegExpNonemptyClassRangesAtom(RegExpClassAtom a);
                            RegExpNonemptyClassRangesAtomNoDash(RegExpClassAtom a, RegExpNonemptyClassRangesNoDash r);
                            RegExpNonemptyClassRangesDash(RegExpClassAtom a1, RegExpClassAtom a2, RegExpClassRanges r);
                        /*
                         * NonemptyClassRangesNoDash ::= ClassAtom
                         *                             | ClassAtomNoDash NonemptyClassRangesNoDash
                         *                             | ClassAtomNoDash - ClassAtom ClassRanges
                         */
                        abstract RegExpNonemptyClassRangesNoDash();
                            RegExpNonemptyClassRangesNoDashAtom(RegExpClassAtom a);
                            RegExpNonemptyClassRangesNoDashAtomNoDash(RegExpClassAtomNoDash a, RegExpNonemptyClassRangesNoDash r);
                            RegExpNonemptyClassRangesNoDashDash(RegExpClassAtomNoDash a1, RegExpClassAtom a2, RegExpClassRanges r);
                        /*
                         * ClassAtom ::= -
                         *             | ClassAtomNoDash
                         */
                        abstract RegExpClassAtom();
                            RegExpClassAtomDash();
                            /*
                             * ClassAtomNoDash ::= SourceCharacter but not one of \ or ] or -
                             *                   | \ ClassEscape
                             */
                            abstract RegExpClassAtomNoDash();
                                RegExpClassAtomNoDashCharacter(String str);
                                /*
                                 * ClassEscape ::= DecimalEscape
                                 *               | b
                                 *               | CharacterEscape
                                 *               | CharacterClassEscape
                                 */
                                abstract RegExpClassEscape();
                                    RegExpClassDecimalEscape(RegExpDecimalEscape esc);
                                    RegExpClassEscapeB();
                                    RegExpClassCharacterEscape(RegExpCharacterEscape esc);
                                    RegExpClassCharacterClassEscape(RegExpCharacterClassEscape esc);
                RegExpParen(RegExpDisjunction disjunction);
                RegExpParenOpt(RegExpDisjunction disjunction);
            RegExpAtomQuantifier(RegExpAtom atom, RegExpQuantifier quant);
            /*
             * Quantifier ::= QuantifierPrefix
             *              | QuantifierPrefix ?
             */
            RegExpQuantifier(RegExpQuantifierPrefix prefix, boolean greedy);
            /*
             * QuantifierPrefix ::= *
             *                    | +
             *                    | ?
             *                    | { DecimalDigits }
             *                    | { DecimalDigits , }
             *                    | { DecimalDigits , DecimalDigits }
             */
            abstract RegExpQuantifierPrefix();
                RegExpQuantifierStar();
                RegExpQuantifierPlus();
                RegExpQuantifierQuest();
                RegExpQuantifierNumber(Integer first, Option<Integer> second);
    abstract RegExpNodeInfo();
        RegExpCapturingParensInfo(int parenCount);
        RegExpClassRangesInfo(boolean noCaret);
end;
