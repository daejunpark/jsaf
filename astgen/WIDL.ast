/*******************************************************************************
    Copyright (c) 2013, KAIST.
    All rights reserved.

    Use is subject to license terms.

    This distribution may include materials developed by third parties.
 ******************************************************************************/

/********************************
    Web IDL
    http://www.w3.org/TR/WebIDL/
 ********************************/

// REMINDER: If you modify this file, you probably ought to be
// changing factory methods as well.

generateEmptyConstructor yes;   // for reflective object creation
visitMethod accept;
visitorMethodPrefix for;
addGetterPrefixes yes;
usePLT yes;
tabSize 4;
allowNulls no;
generateToString no;
generateEquals yes;
generateSerializers yes;
generateRecursiveVisitors no;
customClassPath ../build;

/* order matters here */
customGenerator kr.ac.kaist.jsaf.astgen.ScalaWIDLGenerator;

package kr.ac.kaist.jsaf.nodes;
import java.lang.Double;
import java.lang.String;
import java.math.BigInteger;
import java.io.Writer;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.LinkedList;
import kr.ac.kaist.jsaf.nodes_util.*;
import kr.ac.kaist.jsaf.useful.*;
import edu.rice.cs.plt.tuple.Option;

begin ast;

/**
 * top-level interface
 */
interface WNode() extends HasAt;
    /**
     * top-level node interface
     */
    interface WIDLNode(SpanInfo info);
        root abstract WIDL() extends UIDObject;
            abstract WDefinition(List<WEAttribute> attrs = Collections.<WEAttribute>emptyList());
                WModule(String name, List<WDefinition> defs);
                WInterface(String name, Option<WId> parent, List<WInterfaceMember> members);
                WCallback(String name, WType returnType, List<WArgument> args);
                WDictionary(String name, Option<WId> parent, List<WDictionaryMember> members);
                WException(String name, Option<WId> parent, List<WExceptionMember> members);
                WEnum(String name, List<WString> enumValueList);
                WTypedef(WType typ, String name);
                WImplementsStatement(String name, String parent);
            abstract WMember(List<WEAttribute> attrs = Collections.<WEAttribute>emptyList());
                WConst(WType typ, String name, WLiteral value)
                    implements WInterfaceMember, WExceptionMember;
                WAttribute(WType typ, String name, List<WQId> exns = Collections.<WQId>emptyList())
                          implements WInterfaceMember;
                WOperation(List<WQualifier> qualifiers, WType typ, Option<String> name,
                           List<WArgument> args, List<WQId> exns = Collections.<WQId>emptyList())
                          implements WInterfaceMember;
                WDictionaryMember(WType typ, String name, Option<WLiteral> default);
                WExceptionField(WType typ, String name) implements WExceptionMember;
            abstract WLiteral();
                WBoolean(boolean value);
                WFloat(String value);
                WInteger(String value);
                WString(String str);
                WNull();
            abstract WType(List<WTypeSuffix> suffix = Collections.<WTypeSuffix>emptyList());
                WAnyType();
                WNamedType(String name);
                WArrayType(WType typ);
                WSequenceType(WType typ);
                WUnionType(List<WType> types);
            WArgument(List<WEAttribute> attributes = Collections.<WEAttribute>emptyList(),
                      WType typ, String name, Option<WLiteral> default);
            WId(String name);
            WQId(List<String> name);
        interface WInterfaceMember();
        interface WExceptionMember();
    /**
     * top-level information interface
     */
    abstract WIDLNodeInfo() extends UIDObject;
        abstract WTypeSuffix();
            WTSArray();
            WTSQuestion();
        abstract WEAttribute();
            WEAConstructor(List<WArgument> args);
            WEAArray();
            WEANoInterfaceObject();
            WEACallbackFunctionOnly();
            WEAString(String str);
            WEAQuestion();
            WEAEllipsis();
            WEAOptional();
            WEAAttribute();
            WEACallback();
            WEAConst();
            WEACreator();
            WEADeleter();
            WEADictionary();
            WEAEnum();
            WEAException();
            WEAGetter();
            WEAImplements();
            WEAInherit();
            WEAInterface();
            WEAReadonly();
            WEALegacycaller();
            WEAPartial();
            WEASetter();
            WEAStatic();
            WEAStringifier();
            WEATypedef();
            WEAUnrestricted();
        abstract WQualifier();
            WQStatic();
            WQGetter();
            WQSetter();
            WQCreator();
            WQDeleter();
            WQLegacycaller();
end;
