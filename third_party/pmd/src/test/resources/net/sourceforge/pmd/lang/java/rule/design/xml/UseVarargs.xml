<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
constructor, use varargs
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 public Foo(String[] args) { }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
method, use varargs
     ]]></description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
 public bar(String[] args) { }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
constructor, do not varargs
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 public Foo(String[] args, int x) { }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
method, do not varargs
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 public bar(String[] args, int x) { }
}
     ]]></code>
    </test-code>
    <test-code regressionTest="false">
        <description><![CDATA[
method, do not varargs as the signature is dictated by an interface
// TODO Once this is implemented, perhaps it should be optional? The compiler will technically let you use varargs.
     ]]></description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
public class Foo implements InvocationHandler {
    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
	return null;
    }
}
     ]]></code>
    </test-code>
</test-data>
