<?xml version="1.0" encoding="UTF-8"?>
<test-data>
    <test-code>
        <description><![CDATA[
connection is closed, ok
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
 void bar() {
  Connection c = pool.getConnection();
  try {
  } catch (Exception e) {
  } finally {
   c.close();
  }
 }
}
     ]]></code>
    </test-code>
    <test-code>

        <description><![CDATA[
connection not closed, should have failed
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Connection c = pool.getConnection();
  try {
  } catch (Exception e) {
  }
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
ResultSet not closed, should have failed
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>

        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  ResultSet c = pool.getRS();
  try {
  } catch (Exception e) {}
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
Statement not closed, should have failed
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>1</expected-problems>

        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Statement c = pool.getStmt();
  try {
  } catch (Exception e) {}
 }
}
     ]]></code>
    </test-code>
    <code-fragment id="executeQuery"><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Statement c = pool.getStmt();
  Statement st = c.executeQuery("SELECT * FROM FOO");
  try {
  } finally {
     MyHelper.close(c);
     cleanup(st);
}
 }
}
     ]]></code-fragment>
    <test-code>
        <description><![CDATA[
Bad, no closeTargets properties for statements
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>2</expected-problems>
        <code-ref id="executeQuery"/>

    </test-code>
    <test-code>
        <description><![CDATA[
Ok, closeTargets properties for statements
     ]]></description>
        <rule-property name="closeTargets">MyHelper.close,cleanup</rule-property>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>0</expected-problems>
        <code-ref id="executeQuery"/>
    </test-code>
    
    <test-code>
        <description><![CDATA[
Add type param
     ]]></description>
        <rule-property name="types">ObjectInputStream</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.io.*;
public class BadClose {
private void readData() {
File aFile = new File(FileName);
FileInputStream anInput = new FileInputStream(aFile);
ObjectInputStream aStream = new ObjectInputStream(anInput);

readExternal(aStream);
}
}
     ]]></code>
    </test-code>
    <test-code>

        <description><![CDATA[
OK
     ]]></description>
        <rule-property name="closeTargets">MyHelper.close</rule-property>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Statement c = pool.getStmt();
  try {
  } finally {
     MyHelper.close(c);
}
 }
}
     ]]></code>
    </test-code>
    <test-code>
        <description><![CDATA[
New use case
     ]]></description>
        <rule-property name="closeTargets">commit,close,close,close</rule-property>
        <rule-property name="types">DAOTransaction,Connection,Statement,ResulSet</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
	public void bar() throws SQLException
	{
		DAOTransaction = null;
		Connection cnx = null;
		ResultSet rs = null;
		Statement stmt = null;

		try
		{
			// ...
		}
		finally
		{
			rs.close(); // Correct
			//stmt.close(); // Error !!! you have to close the Statement
			cnx.commit(); // Error !!! You have to use close() before doing this !
			DAOTransaction.commit(); // Correct
		}
	}
}
     ]]></code>
    </test-code>


    <test-code regressionTest="false">
        <description><![CDATA[
[1964798] 3 bugs in CloseResourceRule : Case failing with complete name
     ]]></description>
        <rule-property name="closeTargets">MyHelper.MyClose</rule-property>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Statement c = pool.getStmt();
  try {
  } finally {
     MyHelper.MyClose(c);
}
 }
}
     ]]></code>
    </test-code>
    
 
    <test-code>
        <description><![CDATA[
[1964798] 3 bugs in CloseResourceRule : null object is passed to close conection method (1)
     ]]></description>
        <rule-property	name="closeTargets">this.closeConnection</rule-property>
        <rule-property	name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Connection c;
  try {
    c = pool.getConnection();
  } finally {
     this.closeConnection(null);
  }
 }
}
     ]]></code>
    </test-code>  
    
   <test-code>
        <description><![CDATA[
[1964798] 3 bugs in CloseResourceRule : null object is passed to close conection method (2)
     ]]></description>
        <rule-property	name="closeTargets">this.closeConnection</rule-property>
        <rule-property	name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
import java.sql.*;
public class Foo {
 void bar() {
  Connection c = null;
  try {
    c = pool.getConnection();
  } finally {
     this.closeConnection(c);
  }
 }
}
     ]]></code>
    </test-code>        

	<test-code regressionTest="false">
        <description><![CDATA[
[1964798] 3 bugs in CloseResourceRule : If connection is returned, we should not log a violation.
     ]]></description>
        <rule-property name="types">Connection,Statement,ResultSet</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
	public Connection getConnection() {
		Connection c = pool.getConnection();
		return c;
	}
}
     ]]></code>
    </test-code>
        <test-code reinitializeRule="true">
        <description><![CDATA[
invoke an external method that close the resource
bug 2920057
     ]]></description>
        <rule-property name="closeTargets">closeStatement,closeStatement,closeResultSet,closeConnexion
        </rule-property>
        <rule-property name="types">PreparedStatement,Statement,ResultSet,Connection</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
import java.sql.*;

public class StructureFactory {

    public void rechercherListe() {

        Connection _connexion = null;
        ResultSet _rs = null;
        PreparedStatement _st = null;
        try
        {
           //
        }


        finally
        {
            getProviderInstance().closeConnexion(_connexion);
            getProviderInstance().closeResultSet(_rs);
            getProviderInstance().closeStatement(_st);
            
        }
    }
}
     ]]></code>
    </test-code>
    <test-code reinitializeRule="true">
        <description><![CDATA[
invoke an external method that closes the resource, but one is not the right method and an another is not the right variable
see bug 2920057
     ]]></description>
        <rule-property name="closeTargets">closeStatement,closeStatement,closeResultSet,closeConnexion
        </rule-property>
        <rule-property name="types">PreparedStatement,Statement,ResultSet,Connection</rule-property>
        <expected-problems>2</expected-problems>
        <code><![CDATA[
import java.sql.*;

public class StructureFactory {

    public void searchList() {

        Connection _connexion = null;
        ResultSet _rs = null;
        PreparedStatement _st = null;
        Structure _structure = null;
        try
        {
           //
        }


        finally
        {
            getProviderInstance().closeConnexion(_connexion);
            getProviderInstance().closeYourEyes(_rs); //not the right method
            getProviderInstance().closeStatement(_badOne); // not the right variable
            
        }
    }
}
     ]]></code>
    </test-code>
    
</test-data>
