module Filesystem {
  enum FileMode { "r", "rw", "w", "a" };
  
  enum FileSystemStorageType { "INTERNAL", "EXTERNAL" };
  
  enum FileSystemStorageState { "MOUNTED", "REMOVED", "UNMOUNTABLE" };
  
  [NoInterfaceObject] interface FileSystemManagerObject {
    readonly attribute FileSystemManager filesystem;
  };
  WebAPIs implements FileSystemManagerObject;

  [NoInterfaceObject] interface FileSystemManager {
    readonly attribute long maxPathLength;

    void resolve(DOMString location,
                 FileSuccessCallback onsuccess,
                 optional ErrorCallback? onerror,
                 optional FileMode? mode) raises(WebAPIException);

    void getStorage(DOMString label,
                    FileSystemStorageSuccessCallback onsuccess,
                    optional ErrorCallback? onerror) raises(WebAPIException);

    void listStorages(FileSystemStorageArraySuccessCallback onsuccess,
                      optional ErrorCallback? onerror) raises(WebAPIException);

    long addStorageStateChangeListener(FileSystemStorageSuccessCallback onsuccess,
                                       optional ErrorCallback? onerror) raises(WebAPIException);

    void removeStorageStateChangeListener(long watchId) raises(WebAPIException);
  };

  [NoInterfaceObject] interface FileSystemStorage {
    readonly attribute DOMString label;

    readonly attribute FileSystemStorageType type;

    readonly attribute FileSystemStorageState state;
  };

  [NoInterfaceObject] interface File {
    readonly attribute File? parent;

    readonly attribute boolean readOnly;

    readonly attribute boolean isFile;

    readonly attribute boolean isDirectory;

    readonly attribute Date? created;

    readonly attribute Date? modified;

    readonly attribute DOMString path;

    readonly attribute DOMString name;

    readonly attribute DOMString fullPath;

    readonly attribute unsigned long long fileSize;

    readonly attribute long length;

    DOMString toURI() raises(WebAPIException);

    void listFiles(FileArraySuccessCallback onsuccess,
                   optional ErrorCallback? onerror,
                   optional FileFilter? filter) raises(WebAPIException);

    void openStream(FileMode mode,
                    FileStreamSuccessCallback onsuccess,
                    optional ErrorCallback? onerror,
                    optional DOMString? encoding) raises(WebAPIException);

    void readAsText(FileStringSuccessCallback onsuccess,
                    optional ErrorCallback? onerror,
                    optional DOMString? encoding) raises(WebAPIException);

    void copyTo(DOMString originFilePath,
                DOMString destinationFilePath,
                boolean overwrite,
                optional SuccessCallback? onsuccess,
                optional ErrorCallback? onerror) raises(WebAPIException);

    void moveTo(DOMString originFilePath,
                DOMString destinationFilePath,
                boolean overwrite,
                optional SuccessCallback? onsuccess,
                optional ErrorCallback? onerror) raises(WebAPIException);

    File createDirectory(DOMString dirPath) raises(WebAPIException);

    File createFile(DOMString filePath) raises(WebAPIException);

    File resolve(DOMString filePath) raises(WebAPIException);

    void deleteDirectory(DOMString directory,
                         boolean recursive,
                         optional SuccessCallback? onsuccess,
                         optional ErrorCallback? onerror) raises(WebAPIException);

    void deleteFile(DOMString file,
                    optional SuccessCallback? onsuccess,
                    optional ErrorCallback? onerror) raises(WebAPIException);
  };


  dictionary FileFilter {
    DOMString name;

    Date startModified;

    Date endModified;

    Date startCreated;

    Date endCreated;
  };

  [NoInterfaceObject] interface FileStream {
    readonly attribute boolean eof;

    attribute long position setraises(WebAPIException);

    readonly attribute long bytesAvailable;

    void close();

    DOMString read(long charCount) raises(WebAPIException);

    octet[] readBytes(long byteCount) raises(WebAPIException);

    DOMString readBase64(long byteCount) raises(WebAPIException);

    void write(DOMString stringData) raises(WebAPIException);

    void writeBytes(octet[] byteData) raises(WebAPIException);

    void writeBase64(DOMString base64Data) raises(WebAPIException);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileSuccessCallback {
    void onsuccess(File file);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileSystemStorageArraySuccessCallback {
    void onsuccess(FileSystemStorage[] storages);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileSystemStorageSuccessCallback {
    void onsuccess(FileSystemStorage storage);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileStringSuccessCallback {
    void onsuccess(DOMString fileStr);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileStreamSuccessCallback {
    void onsuccess(FileStream filestream);
  };

  [Callback=FunctionOnly, NoInterfaceObject] interface FileArraySuccessCallback {
    void onsuccess(File[] files);
  };
};
