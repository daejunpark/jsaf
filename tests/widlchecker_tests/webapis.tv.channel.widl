module WebAPIs {

  enum FilterMatchFlag { "EXACTLY", "FULLSTRING", "CONTAINS", "STARTSWITH", "ENDSWITH", "EXISTS" };

  enum SortModeOrder { "ASC", "DESC" };

  enum CompositeFilterType { "UNION", "INTERSECTION" };

  typedef sequence<DOMString> StringArray;

  typedef sequence<unsigned short> UnsignedShortArray;

  typedef sequence<short> ShortArray;

  [NoInterfaceObject] interface WindowWebAPIs {
    readonly attribute WebAPIs webapis;
  };

  Window implements WindowWebAPIs;

  [NoInterfaceObject] interface WebAPIs {
  };

  [NoInterfaceObject] interface AbstractFilter {
  };

  [Constructor(CompositeFilterType type, optional AbstractFilter[]? filters)]
  interface CompositeFilter : AbstractFilter {
    attribute CompositeFilterType type;
    attribute AbstractFilter[] filters;
  };

  [Constructor(DOMString attributeName, optional FilterMatchFlag? matchFlag, optional any matchValue)]
  interface AttributeFilter : AbstractFilter {
    attribute DOMString attributeName;
    attribute FilterMatchFlag matchFlag;
    attribute any matchValue;
  };  

  [Constructor(DOMString attributeName, optional any initialValue, optional any endValue)]
  interface AttributeRangeFilter : AbstractFilter {
    attribute DOMString attributeName;
    attribute any initialValue;
    attribute any endValue;
  };

 [Constructor(DOMString attributeName, optional SortModeOrder? order)] 
  interface SortMode {
    attribute DOMString attributeName;    
    attribute SortModeOrder order setraises(WebAPIException);
  };

[Constructor(double latitude, double longitude)]  
  interface SimpleCoordinates {
    attribute double latitude setraises(WebAPIException);
    attribute double longitude setraises(WebAPIException);
  };

    interface WebAPIException {
        readonly attribute unsigned short code;
        readonly attribute DOMString name; 
        readonly attribute DOMString message;
        const unsigned short INDEX_SIZE_ERR = 1; 
        const unsigned short DOMSTRING_SIZE_ERR = 2; 
        const unsigned short HIERARCHY_REQUEST_ERR = 3; 
        const unsigned short WRONG_DOCUMENT_ERR = 4; 
        const unsigned short INVALID_CHARACTER_ERR = 5;
        const unsigned short NO_DATA_ALLOWED_ERR = 6; 
        const unsigned short NO_MODIFICATION_ALLOWED_ERR = 7; 
        const unsigned short NOT_FOUND_ERR = 8; 
        const unsigned short NOT_SUPPORTED_ERR = 9; 
        const unsigned short INUSE_ATTRIBUTE_ERR = 10; 
        const unsigned short INVALID_STATE_ERR = 11; 
        const unsigned short SYNTAX_ERR = 12; 
        const unsigned short INVALID_MODIFICATION_ERR = 13; 
        const unsigned short NAMESPACE_ERR = 14; 
        const unsigned short INVALID_ACCESS_ERR = 15; 
        const unsigned short VALIDATION_ERR = 16; 
        const unsigned short TYPE_MISMATCH_ERR = 17; 
        const unsigned short SECURITY_ERR = 18; 
        const unsigned short NETWORK_ERR = 19; 
        const unsigned short ABORT_ERR = 20; 
        const unsigned short URL_MISMATCH_ERR = 21; 
        const unsigned short QUOTA_EXCEEDED_ERR = 22; 
        const unsigned short TIMEOUT_ERR = 23; 
        const unsigned short INVALID_NODE_TYPE_ERR = 24; 
        const unsigned short DATA_CLONE_ERR = 25; 
  };

    interface WebAPIError {
        readonly attribute DOMString name; 
        readonly attribute DOMString message;
  };

  [Callback=FunctionOnly, NoInterfaceObject]
  interface SuccessCallback {
    void onsuccess();
  };

  [Callback=FunctionOnly, NoInterfaceObject]
  interface ErrorCallback {
    void onerror (WebAPIError error);
  };
};

module TV {
    [NoInterfaceObject] interface WebAPIsTVObject {
        readonly attribute TV tv;
    };
        
    WebAPIs implements WebAPIsTVObject;
    
    [NoInterfaceObject] interface TV {
    };
};

module channel {

    typedef sequence<ChannelInfo> ChannelInfoArray;

    typedef sequence<ProgramInfo> ProgramInfoArray;
    
    [NoInterfaceObject] interface WebAPIsTVChannelManager {
        readonly attribute TVChannelManager channel;
    };
    TV implements WebAPIsTVChannelManager;

    [Callback=FunctionOnly, NoInterfaceObject] interface TuneCallback
    {
       void onsuccess();
        void onnosignal();
    };
    
    [Callback=FunctionOnly, NoInterfaceObject] interface ProgramListSuccessCallback 
    {
        void onsuccess(in  ProgramArray programList);
    };  
    
    [Callback=FunctionOnly, NoInterfaceObject] interface FindChannelSuccessCallback 
    {
        void onsuccess(in ChannelInfoArray channelInfoArray);
    }; 

    dictionary TuneOption {
        long? ptc;
        long? major;
        long? minor;
        long? sourceID;
        long? programNumber;
        long? transportStreamID;
        long? originalNetworkID;
        TuneCallback tunecallback;
    };
    
    [NoInterfaceObject] interface ChannelInfo {
        attribute long ptc;
        attribute long major;
        attribute long minor;
        readonly attribute long lcn;
        readonly  attribute long sourceID;
        readonly  attribute long programNumber;
        readonly attribute long transportStreamID;
        readonly  attribute long originalNetworkID;
        readonly attribute DOMString servicelName;
        readonly attribute DOMString channelName;
    };
  
    [NoInterfaceObject] interface ProgramInfo {
        readonly attribute DOMString title;
        readonly attribute long startTime;
        readonly attribute long duration;
        readonly attribute DOMString? detailedDescription;
        readonly attribute DOMString? language;
        readonly attribute DOMString? rating;
    };
    
    [NoInterfaceObject] interface TVChannelManager {    
        const unsigned short NAVIGATOR_MODE_ALL = 0;
        const unsigned short NAVIGATOR_MODE_DIGITAL = 1;
        const unsigned short NAVIGATOR_MODE_ANALOG = 2;
        const unsigned short NAVIGATOR_MODE_FAVORITE = 3;

        void tune(in TuneOption tuneOption,
                    in SuccessCallback successCallback, 
                    in ErrorCallback? errorCallback, 
                    in optional unsigned short windowID)
                    raises (WebAPIException);
                              
        void tuneUp(in SuccessCallback successCallback, 
                        in ErrorCallback? errorCallback,
                        in optional unsigned short tuneMode,
                        in optional unsigned short windowID)
                        raises (WebAPIException);

        void tuneDown(in SuccessCallback successCallback, 
                           in ErrorCallback? errorCallback, 
                           in optional unsigned short tuneMode, 
                           in optional unsigned short windowID)
                           raises(WebAPIException);

        void getChannelList(in FindChannelSuccessCallback successCallback,
                                                 in ErrorCallback? errorCallback,  
                                                 in optional unsigned short mode,
                                                 in optional unsigned long nStart, 
                                                 in optional unsigned long number)
                                                 raises (WebAPIException);

        ChannelInfo getCurrentChannel(in optional unsigned short windowID) raises(WebAPIException);

        void findChannel(in short major,
                             in short minor, 
                             in FindChannelSuccessCallback successCallback, 
                             in ErrorCallback? errorCallback)
                             raises(WebAPIException);

        ProgramInfo getCurrentProgram(in optional unsigned short windowID) raises(WebAPIException);    
        
        void getProgramList(in ChannelInfo channelInfo, 
                                 in unsigned long startTime, 
                                 in ProgramListSuccessCallback successCallback, 
                                 in ErrorCallback? errorCallback, 
                                 in optional unsigned long duration) raises (WebAPIException);

        unsigned long getNumOfAvailableTuner() raises (WebAPIException);
    };
};
