module NFC {

  enum NDEFRecordTextEncoding { "UTF8", "UTF16" };


  enum NFCTagType { "GENERIC_TARGET", "ISO14443_A", "ISO14443_4A", "ISO14443_3A",
  "MIFARE_MINI", "MIFARE_1K", "MIFARE_4K", "MIFARE_ULTRA", "MIFARE_DESFIRE",
  "ISO14443_B", "ISO14443_4B", "ISO14443_BPRIME", "FELICA", "JEWEL", "ISO15693",
  "UNKNOWN_TARGET" };
  

  [NoInterfaceObject] interface NFCManagerObject {
    readonly attribute NFCManager nfc;
  };
  WebAPIs implements NFCManagerObject;


  [NoInterfaceObject] interface NFCManager {

    const short NFC_RECORD_TNF_EMPTY = 0;

    const short NFC_RECORD_TNF_WELL_KNOWN = 1;

    const short NFC_RECORD_TNF_MIME_MEDIA = 2;

    const short NFC_RECORD_TNF_URI = 3;

    const short NFC_RECORD_TNF_EXTERNAL_RTD = 4;

    const short NFC_RECORD_TNF_UNKNOWN = 5;

    const short NFC_RECORD_TNF_UNCHANGED = 6;


    NFCAdapter getDefaultAdapter() raises(WebAPIException);
  };



  [NoInterfaceObject] interface NFCAdapter {

    readonly attribute boolean powered ;


    void setPowered(boolean state,
                    optional SuccessCallback? successCallback,
                    optional ErrorCallback? errorCallback) raises(WebAPIException);


    void setTagListener(NFCTagDetectCallback detectCallback,
                        optional NFCTagType[]? tagFilter) raises(WebAPIException);


    void setPeerListener(NFCPeerDetectCallback detectCallback) raises(WebAPIException);


    void unsetTagListener() raises(WebAPIException);


    void unsetPeerListener() raises(WebAPIException);


    NDEFMessage? getCachedMessage() raises(WebAPIException);

  };



  [NoInterfaceObject] interface NFCTag {

    readonly attribute NFCTagType type;


    readonly attribute boolean isSupportedNDEF;


    readonly attribute long ndefSize;


    readonly attribute any[] properties; 


    readonly attribute boolean isConnected;



     void readNDEF(NDEFMessageReadCallback readCallback,
                  optional ErrorCallback? errorCallback) raises(WebAPIException);


    void writeNDEF(NDEFMessage ndefMessage,
                   optional SuccessCallback? successCallback,
                   optional ErrorCallback? errorCallback) raises(WebAPIException);


    void transceive(byte[] data,
                    ByteArraySuccessCallback dataCallback,
                    optional ErrorCallback? errorCallback) raises(WebAPIException);
  };



  [NoInterfaceObject] interface NFCPeer {

    readonly attribute boolean isConnected;
    

    void setReceiveNDEFListener(NDEFMessageReadCallback successCallback) raises(WebAPIException);


    void unsetReceiveNDEFListener() raises(WebAPIException);


    void sendNDEF(NDEFMessage ndefMessage,
                  optional SuccessCallback? successCallback,
                  optional ErrorCallback? errorCallback) raises(WebAPIException);

  };

  [Constructor(),
   Constructor(NDEFRecord[] ndefRecords),
   Constructor(byte[] rawData)]

  interface NDEFMessage {

    readonly attribute long recordCount;
    

    attribute NDEFRecord[] records;


    byte[] toByte() raises(WebAPIException);
  };

  [Constructor(short tnf, byte[] type, byte[] payload, optional byte[]? id),
   Constructor(byte[] raw_data)]

  interface NDEFRecord {

    readonly attribute short tnf;


    readonly attribute byte[] type;


    readonly attribute byte[] id;
    

    readonly attribute byte[] payload;
  };

  [Constructor(DOMString text, DOMString languageCode, optional DOMString? encoding)]

  interface NDEFRecordText : NDEFRecord {

    readonly attribute DOMString text;
    

    readonly attribute DOMString languageCode;
    

    readonly attribute NDEFRecordTextEncoding encoding;
  };

  [Constructor(DOMString uri)]

  interface NDEFRecordURI : NDEFRecord {

    readonly attribute DOMString uri;
  };

  [Constructor(DOMString mimeType, byte[] data)]

  interface NDEFRecordMedia : NDEFRecord {

    readonly attribute DOMString mimeType;
  };

 

  [Callback, NoInterfaceObject] interface NFCTagDetectCallback {

    void onattach(NFCTag nfcTag);

    void ondetach();
  };


  [Callback, NoInterfaceObject] interface NFCPeerDetectCallback {

    void onattach(NFCPeer nfcPeer);

    void ondetach();
  };


  [Callback=FunctionOnly, NoInterfaceObject] interface NDEFMessageReadCallback {

    void onsuccess(NDEFMessage ndefMessage);
  };


  [Callback=FunctionOnly, NoInterfaceObject] interface ByteArraySuccessCallback {

    void onsuccess(byte[] data);
  };

};
