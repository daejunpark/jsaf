  var checklog = false;
  function enablelog(obj) 
  {
    if(obj.checked)
    {
      checklog = true;
      con.log("log enabled");
    }
    else
    {
      con.log("log disabled");
      checklog = false;
    }
  }
  function cleartext() 
  {
    var textarea = document.getElementById("log");
    textarea.value = "";
  }
  var con = {
    log : (function (content, append, id) 
    {
      if(id == null)
      {
        id = "log";
      }
      if(append == null)
      {
        append = true;
      }
      var logEle = document.getElementById(id);
      if(checklog == true)
      {
        if(append)
        {
          logEle.value += "[LOG:] " + content + "\n";
        }
        else
        {
          logEle.value = content;
        }
      }
    }),
    result : (function (content) 
    {
      var logEle = document.getElementById("log");
      logEle.value += "[Result:] " + content + "\n";
    })
  };
  
  var batterylistener = null;
  var cpulistener = null;
  var storagelistener = null;
  var displaylistener = null;
  function addbatteryListener(obj) 
  {
    function onSuccessCallback(system) 
    {
      con.result("Event, battery level : " + system.level);
      con.result("Event, battery isCharging : " + system.isCharging);
    }
    if(obj.checked)
    {
      try
{        batterylistener = tizen.systeminfo.addPropertyValueChangeListener("BATTERY", onSuccessCallback);}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

      con.result("BATTERY listener added!");
    }
    else
    {
      try
{        tizen.systeminfo.removePropertyValueChangeListener(batterylistener);}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

      con.result("BATTERY listener removed!");
    }
  }
  function addcpuListener(obj) 
  {
    function onSuccessCallback(system) 
    {
      con.result("Event, CPU load : " + system.load);
    }
    if(obj.checked)
    {
      try
{        cpulistener = tizen.systeminfo.addPropertyValueChangeListener("CPU", onSuccessCallback);}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

      con.result("CPU listener added!");
    }
    else
    {
      try
{        tizen.systeminfo.removePropertyValueChangeListener(cpulistener);}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

      con.result("CPU listener removed!");
    }
  }
  function addstorageListener(obj) 
  {
    function onSuccessCallback(system) 
    {
      con.result("Event, Total Storage : " + system.units.length);
      for(var i = 0;i < system.units.length;i ++)
      {
        con.result("Event, Storage\tentry : " + i);
        con.result("Event, Storage\ttype : " + system.units[i].type);
        con.result("Event, Storage\tcapacity : " + system.units[i].capacity);
        con.result("Event, Storage\tavailable capacity : " + system.units[i].availableCapacity);
        con.result("Event, Storage\tisRemoveable : " + system.units[i].isRemoveable);
      }
    }
    if(obj.checked)
    {
      try
{        storagelistener = tizen.systeminfo.addPropertyValueChangeListener("STORAGE", onSuccessCallback);}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

      con.result("STORAGE listener added!");
    }
    else
    {
      try
{        tizen.systeminfo.removePropertyValueChangeListener(storagelistener);}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

      con.result("STORAGE listener removed!");
    }
  }
  function adddisplayListener(obj) 
  {
    function onSuccessCallback(system) 
    {
      con.result("Event, Display resolution width : " + system.resolutionWidth);
      con.result("Event, Display resolution height : " + system.resolutionHeight);
      con.result("Event, Display dots per inch width : " + system.dotsPerInchWidth);
      con.result("Event, Display dots per inch height : " + system.dotsPerInchHeight);
      con.result("Event, Display physical width : " + system.physicalWidth);
      con.result("Event, Display physical height : " + system.physicalHeight);
      con.result("Event, Display brightness : " + system.brightness);
    }
    if(obj.checked)
    {
      try
{        displaylistener = tizen.systeminfo.addPropertyValueChangeListener("DISPLAY", onSuccessCallback);}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

      con.result("DISPLAY listener added!");
    }
    else
    {
      try
{        tizen.systeminfo.removePropertyValueChangeListener(displaylistener);}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

      con.result("DISPLAY listener removed!");
    }
  }
  function getPropertyValue() 
  {
    var temp_property;
    function onSuccessCallback(system) 
    {
      con.log("in getPropertyValue successcallback");
      if(temp_property == "BATTERY")
      {
        con.result("battery level : " + system.level);
        con.result("battery isCharging : " + system.isCharging);
      }
      else
        if(temp_property == "CPU")
        {
          con.result("CPU load : " + system.load);
        }
        else
          if(temp_property == "STORAGE")
          {
            con.result("Total Storage : " + system.units.length);
            for(var i = 0;i < system.units.length;i ++)
            {
              con.result("Storage\tentry : " + i);
              con.result("Storage\ttype : " + system.units[i].type);
              con.result("Storage\tcapacity : " + system.units[i].capacity);
              con.result("Storage\tavailable capacity : " + system.units[i].availableCapacity);
              con.result("Storage\tisRemoveable : " + system.units[i].isRemoveable);
            }
          }
          else
            if(temp_property == "DISPLAY")
            {
              con.result("Display resolution width : " + system.resolutionWidth);
              con.result("Display resolution height : " + system.resolutionHeight);
              con.result("Display dots per inch width : " + system.dotsPerInchWidth);
              con.result("Display dots per inch height : " + system.dotsPerInchHeight);
              con.result("Display physical width : " + system.physicalWidth);
              con.result("Display physical height : " + system.physicalHeight);
              con.result("Display brightness : " + system.brightness);
            }
            else
            {
              con.result("Wrong property");
            }
    }
    function onErrorCallback() 
    {
      con.log("in getPropertyValue errorcallback");
    }
    temp_property = document.getElementById("property").value;
    con.log("invoking getPropertyValue");
    try
{      tizen.systeminfo.getPropertyValue(temp_property, onSuccessCallback, onErrorCallback);}
    catch(e)
{      con.log("error while invoking getPropertyValue" + e.name + e.message);}

  }
  
  var adapter = null;
  function getAdapter() 
  {
    try
{      con.log("getting adapter" + webapis.nfc);
      adapter = tizen.nfc.getDefaultAdapter();
      con.log("get adapter success, adapter power : " + adapter.powered);}
    catch(e)
{      con.log("error while getting NFC default adapter" + e.name + e.message);}

    if(adapter != null)
      enableButtons();
  }
  function setPowered() 
  {
    var state;
    if(adapter.powered == true)
      state = false;
    else
      state = true;
    function onSuccessCallback() 
    {
      con.log("power : " + state);
    }
    function onErrorCallback(e) 
    {
      con.log("in setPowered errorcallback " + e.name);
    }
    con.log("setPowered to " + state + " state");
    con.log(adapter.powered);
    con.log(adapter.setPowered);
    con.log(adapter.setTagListener);
    try
{      adapter.setPowered(false, onSuccessCallback, onErrorCallback);}
    catch(e)
{      con.log("error while invoking setPowered" + e.name + e.message);}

  }
  function enableButtons() 
  {
    document.getElementById("nfcsetpowered").disabled = false;
  }
  function readNFCTag(nfcTag) 
  {
    function readCallback(ndefMessage) 
    {
      con.result("ReadNDEF, record count : " + ndefMessage.records.length);
      con.result("ReadNDEF, record count : " + ndefMessage.recordCount);
      for(var i = 0;i < ndefMessage.recordCount;i ++)
      {
        con.result("NDEFRecord #" + i + ", tnf : " + ndefMessage.records[i].tnf);
        con.result("NDEFRecord #" + i + ", type : " + ndefMessage.records[i].type);
        con.result("NDEFRecord #" + i + ", id : " + ndefMessage.records[i].id);
        con.result("NDEFRecord #" + i + ", payload : " + ndefMessage.records[i].payload);
        con.result("NDEFRecord #" + i + ", text : " + ndefMessage.records[i].text);
        con.result("NDEFRecord #" + i + ", uri : " + ndefMessage.records[i].uri);
        con.result("NDEFRecord #" + i + ", mime : " + ndefMessage.records[i].mime);
      }
      unsetTagListener();
    }
    function errorCallback(e) 
    {
      con.result("ErrorCallback, readNDEF : " + e.name);
      unsetTagListener();
    }
    try
{      nfcTag.readNDEF(readCallback, errorCallback);}
    catch(e)
{      con.log("error while readNDEF" + e.name + e.message);
      unsetTagListener();}

  }
  function writeNFCTag(nfcTag) 
  {
    function successCallback() 
    {
      con.result("WriteNDEF, success!");
    }
    function errorCallback(e) 
    {
      con.result("ErrorCallback, writeNDEF : " + e.name);
      unsetTagListener();
    }
    try
{      var temprecord = new tizen.NDEFRecordText("testStringKwon", "ko-KR");
      var tempmessage = new webapis.NDEFMessage([temprecord, ]);
      nfcTag.writeNDEF(tempmessage, successCallback, errorCallback);}
    catch(e)
{      con.log("error while writeNDEF" + e.name + e.message);
      unsetTagListener();}

  }
  function unsetTagListener() 
  {
    try
{      con.result("Tag listener removed!");}
    catch(e)
{      con.log("error while removing listener" + e.name + e.message);}

  }
  function setTagListener() 
  {
    var operation = document.getElementById("TagSelection").value;
    var onSuccessCallback = {
      onattach : (function (nfcTag) 
      {
        con.result("Event, Tag Type : " + nfcTag.type);
        con.result("Event, Tag isSupportedNDEF : " + nfcTag.isSupportedNDEF);
        con.result("Event, Tag ndefSize : " + nfcTag.type);
        con.result("Event, Tag isConnected : " + nfcTag.isConnected);
        if(operation == "READ")
        {
          alert("inREAD");
          readNFCTag(nfcTag);
        }
        else
          if(operation == "WRITE")
          {
            alert("inWRITE");
            writeNFCTag(nfcTag);
          }
          else
            if(operation == "TRANSCEIVE")
            {
              con.log("transceive not supported");
              unsetTagListener();
            }
            else
              con.log("ERROR getting NFC Tag operation");
        unsetTagListener();
      }),
      ondetach : (function () 
      {
        con.result("Event, Tag is detached.");
      })
    };
    try
{      adapter.setTagListener(onSuccessCallback);
      con.result("Tag listener added!");}
    catch(e)
{      con.log("error while adding listener" + e.name + e.message);}

  }
  function setPeerListener(obj) 
  {
    var onSuccessCallback = {
      onattach : (function (nfcPeer) 
      {
        con.result("Event, isConnected : " + nfcPeer.isConnected);
      }),
      ondetach : (function () 
      {
        con.result("Event, Peer is detached.");
      })
    };
    if(obj.checked)
    {
      try
{        adapter.setPeerListener(onSuccessCallback);
        con.result("Peer listener added!");}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

    }
    else
    {
      try
{        adapter.unsetPeerListener();
        con.result("Peer listener removed!");}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

    }
  }
  
  function launchApplication() 
  {
    function onSuccessCallback(system) 
    {
      con.log("in launch successcallback");
    }
    function onErrorCallback(e) 
    {
      con.log("in launch errorcallback" + e.name + e.message);
    }
    var appid = document.getElementById("appid").value;
    con.log("invoking launch()");
    try
{      webapis.application.launch(appid, onSuccessCallback, onErrorCallback);}
    catch(e)
{      con.log("error while invoking getPropertyValue" + e.name + e.message);}

  }
  function launchAppControl() 
  {
    var testAppControl = new webapis.ApplicationControl("http://tizen.org/appcontrol/operation/view", "http://www.naver.com");
    function successCB() 
    {
      alert("launchAppControl pass");
    }
    function errCB() 
    {
      alert("errorCB, launchAppControl failed");
    }
    var replyCallBack = {
      onsuccess : (function (data) 
      {
        if(data == null)
        {
          alert(data);
        }
      }),
      onfailure : (function () 
      {
        alert("onfail");
      })
    };
    try
{      webapis.application.launchAppControl(testAppControl, null, successCB, errCB, replyCallBack);}
    catch(e)
{      alert(e.name + e.message);}

  }
  function getAppsContext() 
  {
    function onRunningAppsContext(contexts) 
    {
      for(var i = 0;i < contexts.length;i ++)
      {
        con.log(i + " contextID : " + contexts[i].id);
        con.log(i + " appID : " + contexts[i].appId);
      }
    }
    webapis.application.getAppsContext(onRunningAppsContext);
  }
  function getCurrentAppId() 
  {
    try
{      alert(webapis.application);
      var app = webapis.application.getCurrentApplication();}
    catch(e)
{      con.log("getCuurentApplication error : " + e.name + e.message);}

    con.log("Current application's app id is " + app.appInfo.id);
  }
  
  var retrievedNetworks;
  function getAvailableNetworks() 
  {
    function onSuccessCallback(networks) 
    {
      con.log("in success of getAvailableNetworks");
      retrievedNetworks = networks;
      enableNetworkButtons();
      var select = document.getElementById("availableNetwork");
      for(var i = 0;i < networks.length;i ++)
      {
        select.options[i] = new Option(networks[i].interfaceType, networks[i].interfaceType);
      }
    }
    function onErrorCallback(e) 
    {
      con.log("in errorcallback" + e.name + e.message);
    }
    try
{      webapis.network.getAvailableNetworks(onSuccessCallback, onErrorCallback);}
    catch(e)
{      con.log("exception while invoking getAvailableNetworks" + e.name + e.message);}

  }
  function getNetworkInformation() 
  {
    var interfaceType = document.getElementById("availableNetwork").value;
    for(var i = 0;i < retrievedNetworks.length;i ++)
    {
      if(interfaceType == retrievedNetworks[i].interfaceType)
      {
        con.result("dns : " + retrievedNetworks[i].dns);
        con.result("dnsMode : " + retrievedNetworks[i].dnsMode);
        con.result("gateway : " + retrievedNetworks[i].gateway);
        con.result("subnetMask : " + retrievedNetworks[i].subnetMask);
        con.result("ip : " + retrievedNetworks[i].ip);
        con.result("ipMode : " + retrievedNetworks[i].ipMode);
        con.result("mac : " + retrievedNetworks[i].mac);
        con.result("interfaceType : " + retrievedNetworks[i].interfaceType);
        break;
      }
    }
  }
  function enableNetworkButtons() 
  {
    document.getElementById("getNetworkInformation").disabled = false;
    document.getElementById("isActive").disabled = false;
    document.getElementById("networkCheckbox").disabled = false;
  }
  function isActive() 
  {
    var interfaceType = document.getElementById("availableNetwork").value;
    for(var i = 0;i < retrievedNetworks.length;i ++)
    {
      if(interfaceType == retrievedNetworks[i].interfaceType)
      {
        con.result(retrievedNetworks[i].interfaceType + " isActive : " + retrievedNetworks[i].isActive());
        break;
      }
    }
  }
  function setNetworkWatchListener(obj) 
  {
    var onSuccessCallback = {
      onconnect : (function (type) 
      {
        con.log("[Event] " + type + " is connected successfully");
      }),
      ondisconnect : (function (type) 
      {
        con.log("[Event] " + type + " is disconnected");
      })
    };
    function onErrorCallback(e) 
    {
      con.log("in errorcallback" + e.name + e.message);
    }
    if(obj.checked)
    {
      try
{        var interfaceType = document.getElementById("availableNetwork").value;
        for(var i = 0;i < retrievedNetworks.length;i ++)
        {
          if(interfaceType == retrievedNetworks[i].interfaceType)
          {
            if(retrievedNetworks[i].isActive())
            {
              retrievedNetworks[i].setWatchListener(onSuccessCallback, onErrorCallback);
              break;
            }
            else
            {
              con.log(retrievedNetworks[i].interfaceType + " is not Active.");
              break;
            }
          }
        }}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

      con.result("Watch listener added!");
    }
    else
    {
      try
{        var interfaceType = document.getElementById("availableNetwork").value;
        for(var i = 0;i < retrievedNetworks.length;i ++)
        {
          if(interfaceType == retrievedNetworks[i].interfaceType)
          {
            if(retrievedNetworks[i].isActive())
            {
              retrievedNetworks[i].unsetWatchListener();
              break;
            }
            else
            {
              con.log(retrievedNetworks[i].interfaceType + " is not Active.");
              break;
            }
          }
        }}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

      con.result("Watch listener removed!");
    }
  }
  
  var numOfScreenState = 4;
  var numOfCPUState = 1;
  var previousSelectedResource = "SCREEN";
  function selectLoadFunction() 
  {
    var selected = document.getElementById("powerResource");
    var selectedValue = selected.options[selected.selectedIndex].value;
    var state = document.getElementById("PowerState");
    if(previousSelectedResource == "SCREEN")
    {
      for(var i = numOfScreenState - 1;i > - 1;i --)
      {
        state.options[i] = null;
      }
    }
    else
      if(previousSelectedResource == "CPU")
      {
        state.options[0] = null;
      }
    if(selectedValue == "SCREEN")
    {
      previousSelectedResource = "SCREEN";
      state.options[0] = new Option("SCREEN_OFF", "SCREEN_OFF");
      state.options[1] = new Option("SCREEN_DIM", "SCREEN_DIM");
      state.options[2] = new Option("SCREEN_NORMAL", "SCREEN_NORMAL");
      state.options[3] = new Option("SCREEN_BRIGHT", "SCREEN_BRIGHT");
    }
    else
    {
      previousSelectedResource = "CPU";
      state.options[0] = new Option("CPU_AWAKE", "CPU_AWAKE");
    }
  }
  function request() 
  {
    var resourceParam = document.getElementById("powerResource").value;
    var stateParam = document.getElementById("PowerState").value;
    con.log("request resource " + resourceParam + ", state " + stateParam);
    try
{      tizen.power.request(resourceParam, stateParam);
      con.log("requested successfully");}
    catch(e)
{      con.log("exception while invoking request" + e.name + e.message);}

  }
  function release() 
  {
    var resourceParam = document.getElementById("powerResource").value;
    con.log("release resource " + resourceParam);
    try
{      tizen.power.release(resourceParam);
      con.log("released successfully");}
    catch(e)
{      con.log("exception while invoking release" + e.name + e.message);}

  }
  function showValue(newValue) 
  {
    document.getElementById("range").innerHTML = newValue / 10;
    con.log("set screen brightness to " + newValue / 10);
    try
{      tizen.power.setScreenBrightness(newValue / 10);}
    catch(e)
{      con.log("exception while invoking setScreenBrightness" + e.name + e.message);}

  }
  function getScreenBrightness() 
  {
    var brightness;
    try
{      brightness = tizen.power.getScreenBrightness();}
    catch(e)
{      con.log("exception while invoking getScreenBrightness" + e.name + e.message);}

    con.result("current brightness : " + brightness);
  }
  function restoreScreenBrightness() 
  {
    try
{      tizen.power.restoreScreenBrightness();}
    catch(e)
{      con.log("exception while invoking restoreScreenBrightness" + e.name + e.message);}

    con.result("restoreScreenBrightness success");
  }
  function isScreenOn() 
  {
    var result;
    try
{      result = tizen.power.isScreenOn();}
    catch(e)
{      con.log("exception while invoking isScreenOn" + e.name + e.message);}

    con.result("isScreenOn : " + result);
  }
  function turnScreenOn() 
  {
    try
{      tizen.power.turnScreenOn();
      con.result("turnScreenOn success");}
    catch(e)
{      con.log("exception while invoking turnScreenOn" + e.name + e.message);}

  }
  function turnScreenOff() 
  {
    try
{      tizen.power.turnScreenOff();
      con.result("turnScreenOff success");}
    catch(e)
{      con.log("exception while invoking turnScreenOff" + e.name + e.message);}

  }
  function setScreenStateChangeListener(obj) 
  {
    function onScreenStateChanged(previousState, changedState) 
    {
      con.log("[Event] Screen state changed from " + previousState + " to " + changedState);
    }
    if(obj.checked)
    {
      try
{        tizen.power.setScreenStateChangeListener(onScreenStateChanged);
        con.result("screen change listener added!");}
      catch(e)
{        con.log("error while adding listener" + e.name + e.message);}

    }
    else
    {
      try
{        tizen.power.unsetScreenStateChangeListener();
        con.result("screen change listener removed!");}
      catch(e)
{        con.log("error while removing listener" + e.name + e.message);}

    }
  }
  
  try
{    var dateObject = tizen.time.getCurrentDateTime();}
  catch(e)
{    con.log("exception while invoking getCurrentDateTime" + e.name + e.message);}

  try
{    var dateObjectforUTC = tizen.time.getCurrentDateTime();}
  catch(e)
{    con.log("exception while invoking getCurrentDateTime" + e.name + e.message);}

  function getCurrentDateTime() 
  {
    con.log("get current time");
    try
{      var current_date = tizen.time.getCurrentDateTime();}
    catch(e)
{      con.log("exception while invoking getCurrentDateTime" + e.name + e.message);}

    con.result("current date(toLocaleDateString) : " + current_date.toLocaleDateString());
    con.result("current date(toLocaleTimeString) : " + current_date.toLocaleTimeString());
    con.result("current date(toLocaleString)     : " + current_date.toLocaleString());
    con.result("current date(toDateString)       : " + current_date.toDateString());
    con.result("current date(toTimeString)       : " + current_date.toTimeString());
    con.result("current date(toString)           : " + current_date.toString());
    con.result("current date(toUTC)           : " + current_date.toUTC().toString());
  }
  function getLocalTimezone() 
  {
    con.log("get local timezone");
    try
{      var localTimezone = tizen.time.getLocalTimezone();}
    catch(e)
{      con.log("exception while invoking getLocalTimezone" + e.name + e.message);}

    con.result("The local time zone is " + localTimezone);
  }
  function getAvailableTimezones() 
  {
    con.log("get available timezones");
    try
{      var availTimezones = tizen.time.getAvailableTimezones();}
    catch(e)
{      con.log("exception while invoking getAvailableTimezones" + e.name + e.message);}

    con.result("The device supports " + availTimezones.length + " time zones.");
    for(var i = 0;i < availTimezones.length;i ++)
      con.result(i + " : " + availTimezones[i]);
  }
  function getDateFormat() 
  {
    con.log("get DateFormat");
    try
{      var shortformat = tizen.time.getDateFormat(true);
      var longformat = tizen.time.getDateFormat(false);}
    catch(e)
{      con.log("exception while invoking getDateFormat" + e.name + e.message);}

    con.result("The short format is " + shortformat);
    con.result("The long format is " + longformat);
  }
  function getTimeFormat() 
  {
    con.log("get TimeFormat");
    try
{      var timeformat = tizen.time.getTimeFormat();}
    catch(e)
{      con.log("exception while invoking getTimeFormat" + e.name + e.message);}

    con.result("The time format is " + timeformat);
  }
  function isLeapYear() 
  {
    con.log("calling isLeapYear");
    try
{      var isleap = tizen.time.isLeapYear(2016);}
    catch(e)
{      con.log("exception while invoking isLeapYear" + e.name + e.message);}

    con.result("Is 2016 leap year? : " + isleap);
  }
  function getDate() 
  {
    var radio = document.getElementsByName("time");
    var sizes = radio.length;
    var result;
    for(i = 0;i < sizes;i ++)
    {
      if(radio[i].checked == true)
      {
        switch(radio[i].value){
          case "date":
            result = dateObject.getDate();
            break;

          case "day":
            result = dateObject.getDay();
            break;

          case "fullyear":
            result = dateObject.getFullYear();
            break;

          case "hours":
            result = dateObject.getHours();
            break;

          case "msec":
            result = dateObject.getMilliseconds();
            break;

          case "min":
            result = dateObject.getMinutes();
            break;

          case "month":
            result = dateObject.getMonth() + 1;
            break;

          case "sec":
            result = dateObject.getSeconds();
            break;

          
        }
      }
    }
    con.result("result : " + result);
  }
  function setDate() 
  {
    var text = document.getElementById("setTime").value;
    var radio = document.getElementsByName("time");
    var sizes = radio.length;
    text = Number(text);
    for(i = 0;i < sizes;i ++)
    {
      if(radio[i].checked == true)
      {
        switch(radio[i].value){
          case "date":
            dateObject.setDate(text);
            break;

          case "day":
            dateObject.setDay(text);
            break;

          case "fullyear":
            try
{              dateObject.setFullYear(text);}
            catch(e)
{              alert(e.name + e.message);}

            break;

          case "hours":
            dateObject.setHours(text);
            break;

          case "msec":
            dateObject.setMilliseconds(text);
            break;

          case "min":
            dateObject.setMinutes(text);
            break;

          case "month":
            dateObject.setMonth(text + 1);
            break;

          case "sec":
            dateObject.setSeconds(text);
            break;

          
        }
      }
    }
    try
{      document.getElementById("TZObject").innerHTML = dateObject.toString();}
    catch(e)
{      alert("exception while invoking getCurrentDateTime" + e.name + e.message);}

  }
  function getUTCDate() 
  {
    var radio = document.getElementsByName("time");
    var sizes = radio.length;
    var result;
    for(i = 0;i < sizes;i ++)
    {
      if(radio[i].checked == true)
      {
        switch(radio[i].value){
          case "date":
            result = dateObject.getUTCDate();
            break;

          case "day":
            result = dateObject.getUTCDay();
            break;

          case "fullyear":
            result = dateObject.getUTCFullYear();
            break;

          case "hours":
            result = dateObject.getUTCHours();
            break;

          case "msec":
            result = dateObject.getUTCMilliseconds();
            break;

          case "min":
            result = dateObject.getUTCMinutes();
            break;

          case "month":
            result = dateObject.getUTCMonth() + 1;
            break;

          case "sec":
            result = dateObject.getUTCSeconds();
            break;

          
        }
      }
    }
    con.result("result : " + result);
  }
  function setUTCDate() 
  {
    var text = document.getElementById("setTime").value;
    var radio = document.getElementsByName("time");
    var sizes = radio.length;
    text = Number(text);
    for(i = 0;i < sizes;i ++)
    {
      if(radio[i].checked == true)
      {
        switch(radio[i].value){
          case "date":
            dateObjectforUTC.setUTCDate(text);
            break;

          case "day":
            dateObjectforUTC.setUTCDay(text);
            break;

          case "fullyear":
            try
{              dateObjectforUTC.setUTCFullYear(text);}
            catch(e)
{              alert(e.name + e.message);}

            break;

          case "hours":
            dateObjectforUTC.setUTCHours(text);
            break;

          case "msec":
            dateObjectforUTC.setUTCMilliseconds(text);
            break;

          case "min":
            dateObjectforUTC.setUTCMinutes(text);
            break;

          case "month":
            dateObjectforUTC.setUTCMonth(text + 1);
            break;

          case "sec":
            dateObjectforUTC.setUTCSeconds(text);
            break;

          
        }
      }
    }
    try
{      document.getElementById("TZObjectUTC").innerHTML = dateObjectforUTC.toString();}
    catch(e)
{      alert("exception while invoking getCurrentDateTime" + e.name + e.message);}

  }
  function getTimezone() 
  {
    con.log("get timezone");
    var result;
    try
{      result = dateObject.getTimezone();}
    catch(e)
{      con.log("exception while invoking getTimezone" + e.name + e.message);}

    con.result("The timezone is " + result);
  }
  function toTimezone() 
  {
    con.log("to timezone");
    try
{      dateObject = dateObject.toTimezone("Asia/Hong_Kog");}
    catch(e)
{      con.log("exception while invoking toTimezone" + e.name + e.message);}

    con.result("The timezone is " + dateObject.getTimezone());
  }
  function toLocalTimezone() 
  {
    con.log("to Local Timezone");
    try
{      dateObject = dateObject.toLocalTimezone();}
    catch(e)
{      con.log("exception while invoking toLocalTimezone" + e.name + e.message);}

    con.result("The timezone is " + dateObject.getTimezone());
  }
  function difference() 
  {
    con.log("get difference ");
    var diff_TZDate = new tizen.TZDate(2012, 11, 25, 10, 24, 5, 354, "Asia/Hong_Kong");
    var duration;
    try
{      duration = dateObject.difference(diff_TZDate);}
    catch(e)
{      con.log("exception while invoking difference" + e.name + e.message);}

    con.result("The difference is " + duration.length + duration.unit);
  }
  function equalsTo() 
  {
    con.log("equalsTo ");
    try
{      var diff_TZDate = new tizen.TZDate(2012, 11, 25, 10, 24, 5, 354, "Asia/Hong_Kong");}
    catch(e)
{      con.log("exception while crating TZDate " + e.name + e.message);}

    var result;
    try
{      result = dateObject.equalsTo(diff_TZDate);}
    catch(e)
{      con.log("exception while invoking equalsTo" + e.name + e.message);}

    con.result("Is " + dateObject.toString() + " and " + diff_TZDate.toString() + " equal? " + result);
  }
  function earlierThan() 
  {
    con.log("earlierThan ");
    var diff_TZDate = new tizen.TZDate(2012, 11, 25, 10, 24, 5, 354, "Asia/Hong_Kong");
    var result;
    try
{      result = dateObject.earlierThan(diff_TZDate);}
    catch(e)
{      con.log("exception while invoking earlierThan" + e.name + e.message);}

    con.result("Is " + dateObject.toString() + " earlier than " + diff_TZDate.toString() + " ? " + result);
  }
  function laterThan() 
  {
    con.log("laterThan ");
    var diff_TZDate = new tizen.TZDate(2012, 11, 25, 10, 24, 5, 354, "Asia/Hong_Kong");
    var result;
    try
{      result = dateObject.laterThan(diff_TZDate);}
    catch(e)
{      con.log("exception while invoking  laterThan" + e.name + e.message);}

    con.result("Is " + dateObject.toString() + "  later than " + diff_TZDate.toString() + " ? " + result);
  }
  function addDuration() 
  {
    con.log("add Duration ");
    try
{      var duration = new tizen.TimeDuration(1, "DAYS");}
    catch(e)
{      con.log("error while creating TimeDuration object" + e.name + e.message);}

    try
{      dateObject = dateObject.addDuration(duration);}
    catch(e)
{      con.log("exception while invoking  addDuration" + e.name + e.message);}

    con.result(duration.length + duration.unit + " added " + dateObject.toString());
  }
  function getTimezoneAbbreviation() 
  {
    con.log("getTimezoneAbbreviation");
    try
{      var result = dateObject.getTimezoneAbbreviation();}
    catch(e)
{      con.log("exception while invoking getTimezoneAbbreviation" + e.name + e.message);}

    con.result("The timezone abbreviation is " + result);
  }
  function secondsFromUTC() 
  {
    con.log("secondsFromUTC");
    try
{      var result = dateObject.secondsFromUTC();}
    catch(e)
{      con.log("exception while invoking secondsFromUTC" + e.name + e.message);}

    con.result("The seconds from UTC are " + result);
  }
  function isDST() 
  {
    con.log("isDST");
    try
{      var result = dateObject.isDST();}
    catch(e)
{      con.log("exception while invoking isDST" + e.name + e.message);}

    con.result("is DST?  " + result);
  }
  function getPreviousDSTTransition() 
  {
    con.log("getPreviousDSTTransition");
    try
{      var result = dateObject.getPreviousDSTTransition();}
    catch(e)
{      con.log("exception while invoking getPreviousDSTTransition" + e.name + e.message);}

    if(result == null)
      con.result("PreviousDSTTransition" + result);
    else
      con.result("PreviousDSTTransition" + result.toString());
  }
  function getNextDSTTransition() 
  {
    con.log("getNextDSTTransition");
    try
{      var result = dateObject.getNextDSTTransition();}
    catch(e)
{      con.log("exception while invoking getNextDSTTransition" + e.name + e.message);}

    if(result == null)
      con.result("Next DST Transition" + result);
    else
      con.result("Next DST Transition" + result.toString());
  }
  function test() 
  {
    alert("here");
    var testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(undefined);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log("converstion from undefined to long success");
    }
    else
    {
      con.log("setFullYear Error undefined" + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(null);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log("converstion from null to long success");
    }
    else
    {
      con.log("setFullYear Error null" + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(true);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log("converstion from boolean to long success");
    }
    else
    {
      con.log("setFullYear Error boolean" + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear("");}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from ""(empty string) to long success');
    }
    else
    {
      con.log('setFullYear Error ""(empty string) ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear("2015");}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 2015)
    {
      con.log('converstion from "2015"(numeric string) to long success');
    }
    else
    {
      con.log('setFullYear Error "2015"(numeric string) ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear("asdf");}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from "asdf"(non-numeric string) to long success');
    }
    else
    {
      con.log('setFullYear Error "asdf"(non-numeric string) ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(Infinity);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from Infinity to long success');
    }
    else
    {
      con.log('setFullYear Error Infinity ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(NaN);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from NaN to long success');
    }
    else
    {
      con.log('setFullYear Error NaN ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear([2015, ]);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 2015)
    {
      con.log('converstion from numeric elt to long success');
    }
    else
    {
      con.log('setFullYear Error numeric elt ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear(['a', ]);}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from any other array to long success');
    }
    else
    {
      con.log('setFullYear Error any other array ' + e.name + e.message);
    }
    testingTZDateObj = new tizen.TZDate(2012, 1, 1, 1, 1, 1, 1);
    try
{      testingTZDateObj.setFullYear((function () 
      {
        
      }));}
    catch(e)
{      con.log("setFullYear Error" + e.name + e.message);}

    if(testingTZDateObj.getFullYear() == 1)
    {
      con.log('converstion from function to long success');
    }
    else
    {
      con.log('setFullYear Error function ' + e.name + e.message);
    }
  }
  
  function __MOUSEEvent__1(event) 
  {
    getPropertyValue();
  }
  
  function __MOUSEEvent__2(event) 
  {
    addbatteryListener(this);
  }
  
  function __MOUSEEvent__3(event) 
  {
    addcpuListener(this);
  }
  
  function __MOUSEEvent__4(event) 
  {
    addstorageListener(this);
  }
  
  function __MOUSEEvent__5(event) 
  {
    adddisplayListener(this);
  }
  
  function __MOUSEEvent__6(event) 
  {
    getAdapter();
  }
  
  function __MOUSEEvent__7(event) 
  {
    setPowered();
  }
  
  function __MOUSEEvent__8(event) 
  {
    setTagListener();
  }
  
  function __MOUSEEvent__9(event) 
  {
    setPeerListener(this);
  }
  
  function __MOUSEEvent__10(event) 
  {
    launchApplication();
  }
  
  function __MOUSEEvent__11(event) 
  {
    launchAppControl();
  }
  
  function __MOUSEEvent__12(event) 
  {
    getCurrentAppId();
  }
  
  function __MOUSEEvent__13(event) 
  {
    getAppsContext();
  }
  
  function __MOUSEEvent__14(event) 
  {
    getAvailableNetworks();
  }
  
  function __MOUSEEvent__15(event) 
  {
    getNetworkInformation();
  }
  
  function __MOUSEEvent__16(event) 
  {
    isActive();
  }
  
  function __MOUSEEvent__17(event) 
  {
    setNetworkWatchListener(this);
  }
  
  function __OTHEREvent__1(event) 
  {
    selectLoadFunction();
  }
  
  function __MOUSEEvent__18(event) 
  {
    request();
  }
  
  function __MOUSEEvent__19(event) 
  {
    release();
  }
  
  function __OTHEREvent__2(event) 
  {
    showValue(this.value);
  }
  
  function __MOUSEEvent__20(event) 
  {
    getScreenBrightness();
  }
  
  function __MOUSEEvent__21(event) 
  {
    restoreScreenBrightness();
  }
  
  function __MOUSEEvent__22(event) 
  {
    isScreenOn();
  }
  
  function __MOUSEEvent__23(event) 
  {
    turnScreenOn();
  }
  
  function __MOUSEEvent__24(event) 
  {
    turnScreenOff();
  }
  
  function __MOUSEEvent__25(event) 
  {
    setScreenStateChangeListener(this);
  }
  
  function __MOUSEEvent__26(event) 
  {
    getCurrentDateTime();
  }
  
  function __MOUSEEvent__27(event) 
  {
    getLocalTimezone();
  }
  
  function __MOUSEEvent__28(event) 
  {
    getAvailableTimezones();
  }
  
  function __MOUSEEvent__29(event) 
  {
    getDateFormat();
  }
  
  function __MOUSEEvent__30(event) 
  {
    getTimeFormat();
  }
  
  function __MOUSEEvent__31(event) 
  {
    isLeapYear();
  }
  
  function __OTHEREvent__3(event) 
  {
    setDate();
  }
  
  function __MOUSEEvent__32(event) 
  {
    getDate();
  }
  
  function __MOUSEEvent__33(event) 
  {
    setDate();
  }
  
  function __MOUSEEvent__34(event) 
  {
    getUTCDate();
  }
  
  function __MOUSEEvent__35(event) 
  {
    setUTCDate();
  }
  
  function __MOUSEEvent__36(event) 
  {
    getTimezone();
  }
  
  function __MOUSEEvent__37(event) 
  {
    toTimezone();
  }
  
  function __MOUSEEvent__38(event) 
  {
    toLocalTimezone();
  }
  
  function __MOUSEEvent__39(event) 
  {
    difference();
  }
  
  function __MOUSEEvent__40(event) 
  {
    equalsTo();
  }
  
  function __MOUSEEvent__41(event) 
  {
    earlierThan();
  }
  
  function __MOUSEEvent__42(event) 
  {
    laterThan();
  }
  
  function __MOUSEEvent__43(event) 
  {
    addDuration();
  }
  
  function __MOUSEEvent__44(event) 
  {
    getTimezoneAbbreviation();
  }
  
  function __MOUSEEvent__45(event) 
  {
    secondsFromUTC();
  }
  
  function __MOUSEEvent__46(event) 
  {
    isDST();
  }
  
  function __MOUSEEvent__47(event) 
  {
    getPreviousDSTTransition();
  }
  
  function __MOUSEEvent__48(event) 
  {
    getNextDSTTransition();
  }
  
  function __MOUSEEvent__49(event) 
  {
    test();
  }
  
  function __MOUSEEvent__50(event) 
  {
    enablelog(this);
  }
  
  function __MOUSEEvent__51(event) 
  {
    cleartext();
  }
  